---
title: "NFL Tracking Data Project"
author: "Brady Detwiler, Devin Abraham, Dylan Rauum, Wyatt Bellinger"
format:

 pdf: default

fontsize: 10pt

geometry: margin=1in
---

Our data set is player tracking data from the first nine weeks of the 2023-2024 NFL season. This is a subset of the full player tracking data. This data set has data for each player on the field for every 10th of a second. Some plays, for example, scrambles and completions, only include five frames before and after the action. Some of the main columns are gameID, which is a unique ID for each game, playID, which is a unique ID for each play, and nflID, which is a unique ID for each player. In addition, the set has x and y, which are the positions of the player on the field in the long and short way, respectively. S and a, which are the speed and acceleration of the player in yards per second and yards per second squared, respectively. We also have supplementary data which includes extra information about the players, overall game data, play by play data, and specific information on every tackle.

```{r}
library(nflverse)
library(tidyverse)
library(stringr)
library(dplyr)
library(readr)
library(data.table)
#This first section of code will be to explore the data, just to get some ideas of what to do
#make sure your directory call is right
games <- read.csv('games.csv')
players <- read.csv('players.csv')
plays <- read.csv('plays.csv')
tackles <- read.csv('tackles.csv')
data <- read.csv('all_weeks_data.csv')
#tracking_week_1 <- read.csv('tracking_week_1.csv')
#tracking_week_2 <- read.csv('tracking_week_2.csv')
#tracking_week_3 <- read.csv('tracking_week_3.csv')
#tracking_week_4 <- read.csv('tracking_week_4.csv')
#tracking_week_5 <- read.csv('tracking_week_5.csv')
#tracking_week_6 <- read.csv('tracking_week_6.csv')
#tracking_week_7 <- read.csv('tracking_week_7.csv')
#tracking_week_8 <- read.csv('tracking_week_8.csv')
#tracking_week_9 <- read.csv('tracking_week_9.csv')

#data<-rbind(tracking_week_1, tracking_week_2, tracking_week_3, tracking_week_4, tracking_week_5,
            #tracking_week_6,tracking_week_7, tracking_week_8, tracking_week_9)

#fwrite(data, "all_weeks_data.csv")


player_merged <- merge(data, players, by='nflId') #%>% group_by(nflId) %>%
  #summarise(
   # max_speed = max(s, na.rm=TRUE),
   # avg_speed = mean(s, na.rm=TRUE),
   # max_accel = max(a, na.rm=TRUE),
   # avg_accel = mean(a, na.rm=TRUE),
   # height = first(height),
   # weight = mean(weight, na.rm=TRUE),
   # college = first(collegeName),
   # position = first(position),
   # birth_date = first(birthDate),
   # name = first(displayName.x),
  #)

groupnflid <- function(df){
  unique_items<-unique(df$nflId)
  grouped_data <- data.frame(nflId=integer(),
                             name=character(),
                             max_speed=double(),
                             avg_speed=double(),
                             max_accel=double(),
                             avg_accel=double(),
                             height=character(),
                             weight=integer(),
                             college=character(),
                             position=character(),
                             birth_data=character(),
                             stringsAsFactors = FALSE)
  for (token in unique_items){
    individ_data <-df[df$nflId==token,]
    maxspeed <- max(individ_data$s, na.rm=TRUE)
    avgspeed <- mean(individ_data$s, na.rm=TRUE)
    maxaccel <- max(individ_data$a, na.rm=TRUE)
    avgaccel <- mean(individ_data$a, na.rm=TRUE)
    height <- first(individ_data$height)
    weight <- mean(individ_data$weight, na.rm=TRUE)
    college <- first(individ_data$collegeName)
    position <- first(individ_data$position)
    birth_data <- first(individ_data$birthDate)
    name <- first(individ_data$displayName.x)
    Id <- first(individ_data$nflId)
    grouped_data <- rbind(grouped_data, data.frame(
      nflId = Id,
      name = name,
      max_speed = maxspeed,
      avg_speed = avgspeed,
      max_accel = maxaccel,
      avg_accel = avgaccel,
      height = height,
      weight = weight,
      college = college,
      position = position,
      birth_data = birth_data,
      stringsAsFactors = FALSE
    ))
  }
  return(grouped_data)
}

college_data <- groupnflid(player_merged)

convert_to_inches <- function(height) {
  parts <- strsplit(height, "-")[[1]]
  feet <- as.numeric(parts[1])
  inches <- as.numeric(parts[2])
  total_inches <- (feet * 12) + inches
  return(total_inches)
}

find_age <- function(year){
  birth_date <- strsplit(year, "-")[[1]]
  birth_year <- as.numeric(birth_date[1])
  return(2022-birth_year)
}

college_data['heightIN'] <- sapply(college_data$height, convert_to_inches)
college_data['age'] <- sapply(college_data$birth_date, find_age)


#by_age <- college_data %>% group_by(age) %>% 
  #summarise(mean_speed = mean(max_speed), 
            #mean_acceleration=mean(max_accel))%>%arrange(age) %>% filter(!is.na(age))

```

```{r}
groupage <- function(df){
  unique_items<-unique(df$age)
  grouped_data <- data.frame(age=integer(),
                             mean_speed=double(),
                             mean_acceleration=double(),
                             stringsAsFactors = FALSE)
  for (token in unique_items){
    individ_data <-df[df$age==token,]
    avgspeed <- mean(individ_data$max_speed, na.rm=TRUE)
    avgaccel <- mean(individ_data$max_accel, na.rm=TRUE)
    age_group <- token
    grouped_data <- rbind(grouped_data, data.frame(
      age=age_group,
      mean_speed=avgspeed,
      mean_acceleration=avgaccel,
      stringsAsFactors = FALSE
    ))
  }
  return(grouped_data)
}

by_age <- groupage(college_data)
by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
```

The below plots are barplot used to display the change in speed and acceleration as a player ages. Across the x-axis of both plots are the ages in years of players ranging from 23 to 45, while in the first plot the y axis is speed and in the second plot the y axis is acceleration. Speed is represented by the average max speed achieved by players in that age group, and acceleration is represented by the average max acceleration achieved by players in that age group.

```{r}


{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$mean_speed, ylim=c(0,10), ylab='Average Max Speed', xlab='Age', main='Average Max Speed of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_speed-.5), labels=round(by_age$mean_speed,1))
}

```

The speed plot seemed to show a pretty solid correlation that as players age, they become slower. The trend is very distinct between the ages of around 23-31, while more variance is shown in later ages. This variance makes sense as the vast majority of players are between the ages of 23-31, so the smaller sample size for larger ages explains this variation.

```{r}
{barplot(by_age$mean_acceleration, ylim=c(0,13), ylab='Average Max Acceleration', xlab='Age', main='Average Max Acceleration of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_acceleration-.5), labels=round(by_age$mean_acceleration,1))}
```

The acceleration plot showed a much more stable trend, looking like acceleration stays constant through around age 32 before showing a pretty steady decrease between 33 and 36. The dearth of players age 36+ explains the more wild behaviour of the data past that point.

```{r}

speed_vs_age <- lm(avg_speed ~ age, college_data)
summary(speed_vs_age)

x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(speed_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 
cor(no_missing$age, no_missing$avg_speed)

{plot(college_data$age, college_data$avg_speed, ylim=c(0,8), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Average Speed (yd/s)",
     main = "Relationship Between Age and Average Speed",)
abline(speed_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```

Inspired by the above bar charts, we ran a linear regression on the speed and age data. The blue line is the resulting line of best fit, with the transparent red area being the confidence interval of the line. The data showed a negative correlation which was supported by both its correlation coefficient of -.1995, and its pvalue of 3.21e-12 which suggests a statistically significant relationship. This confirmed our earlier suspicions that players slow down as they age.

```{r, echo=FALSE}
player_speed <- function(name){
  
  if (!(name %in% data$displayName)){
    return(FALSE)
  }
  player_name <- data[data$displayName == name, ]
  play_id <- sample(player_name$playId, 1)
  player_play <- player_name[player_name$playId == play_id, ]
  
  
  plot(player_play$frameId, player_play$s, type = "l",
       main = paste(name, "Play Speed Over Time"), 
       xlab = "Time Since Start of Play (Tenths of a Second)",
       ylab = "Speed (yards/second)", 
       col = "blue",           
       lwd = 2,               
       cex.main = 1.5,         
       cex.lab = 1.2,         
       cex.axis = 1.1,         
       font.main = 2,          
       las = 1,                
       bty = "l")              
  
  
  grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")
  

  
}


name = "Micah Parsons"
player_name <- data[data$displayName == name, ]
play_id <- 3183
player_play <- player_name[player_name$playId == play_id, ]

  
{
plot(player_play$frameId, player_play$s, type = "l",
     main = paste(name, "Play Speed Over Time"), 
     xlab = "Time Since Start of Play (Tenths of a Second)",
     ylab = "Speed (yards/second)", 
     col = "blue",           
     lwd = 2,               
     cex.main = 1.5,         
     cex.lab = 1.2,         
     cex.axis = 1.1,         
     font.main = 2,          
     las = 1,                
     bty = "l")              
}
```

This function can take the name of any player and graph their speed in yards/second over time for a random play they were in. Utilizing the base R plot graphic, we enhanced the plot by including a title, axes titles, grid ticks, and dotted grid lines, among other features. We also created error checking to ensure that the input is included in the dataset. In the example, we look at Micah Parson’s speed every 10th of a second. We choose to look at Micah Parsons because he is an extremely explosive linebacker, which is a position with a lot of change of direction when getting off blocks and adjusting to tackling the ball carrier. His speed peaks at around 3.5 seconds into the play, likely when the tackle is made, followed by deceleration.

```{r}
{
plot_player <- function(player_name, game_id, play_id, data, player_color) {
  player_data <- subset(data, displayName == player_name & gameId == game_id & playId == play_id)
  if (nrow(player_data) == 0) {
    warning(paste("No data found for", player_name, "in game", game_id, "and play", play_id))
    return(NULL)
  }
  lines(player_data$x, player_data$y, col = player_color, lwd = 2)
}

plot_play_movement <- function(game_id, play_id, data) {
  play_data <- subset(data, gameId == game_id & playId == play_id)
  
  if (nrow(play_data) == 0) {
    warning(paste("No data found for game", game_id, "and play", play_id))
    return(NULL)
  }
  teams <- unique(play_data$club[play_data$displayName != "football"])
  
  team_colors <- rainbow(length(teams))
  names(team_colors) <- teams
  
  football_color <- "brown"
  
  plot(NULL, xlim = c(0, 120), ylim = c(0, 53.3),
       xlab = 'X Position (yards)', ylab = 'Y Position (yards)',
       main = paste("Player Movements for Game", game_id, "Play", play_id))
  
  rect(0, 0, 120, 53.3, border = "green", lwd = 2)
  rect(0, 0, 10, 53.3, border = "black", lwd = 2)
  rect(110, 0, 120, 53.3, border = "black", lwd = 2)
  
  for (player in unique(play_data$displayName)) {
    if (player == "football") {
      player_color <- football_color
    } else {
      player_team <- unique(play_data$club[play_data$displayName == player])
      player_color <- team_colors[player_team]
    }
    plot_player(player, game_id, play_id, data, player_color)
  }
  
  legend_labels <- c(teams, "Football")
  legend_colors <- c(team_colors, football_color)
  legend("topright", legend = legend_labels, col = legend_colors, lwd = 2, bg = "white")
}

plot_play_movement(2022101603, 346, data)
}
```

The plot_player function is responsible for plotting the trajectory of an individual player. It takes the player's name, game ID, play ID, the dataset, and a designated color as inputs. The function filters the dataset to extract the relevant positional data for the specified player within the given game and play, and draws a colored line representing the player's movement across the field.. The plot_play_movement function orchestrates the overall visualization for a particular play. It begins by subsetting the data for the specified game and play, identifying the unique teams involved, and assigning each team a distinct color, while the football is colored brown. The function then initializes an empty plot that accurately represents the dimensions of a football field, including the end zones. It iterates through each player involved in the play, invoking the plot_player function to draw their movement paths in their respective team colors. After plotting all player movements, plot_play_movement adds a legend to the top right corner of the plot, clearly indicating the teams and the football with their associated colors.

Our example graph using this function comes from a game between the Colts and the Jaguars. This play was a run play, during which the Jaguars running back ran for 25 yards, eventually being tackled out of bounds on the sideline.

```{r}
{
plot_total_distance_per_team <- function(game_id, data) {
  game_data <- subset(data, gameId == game_id & !is.na(nflId))
  teams <- unique(game_data$club)

  total_distance <- numeric(2)
  names(total_distance) <- teams

  for (team in teams) {
    team_players <- unique(game_data$nflId[game_data$club == team])
    team_distance <- 0
    
    for (player in team_players) {
      player_data <- subset(game_data, nflId == player)
      player_data <- player_data[order(player_data$playId, player_data$frameId), ]
      if (nrow(player_data) > 1) {
        dx <- diff(player_data$x)
        dy <- diff(player_data$y)
        distances <- sqrt(dx^2 + dy^2)
        team_distance <- team_distance + sum(distances, na.rm = TRUE)
      }
    }
    total_distance[team] <- team_distance
  }
  total_yards <- sum(total_distance)
  percentages <- (total_distance / total_yards) * 100
  
  labels <- paste0(names(total_distance), "\n",
                   round(total_distance, 0), " yards\n",
                   round(percentages, 1), "%")

  pie_colors <- terrain.colors(2)
  pie(
    x = total_distance,
    labels = labels,
    col = pie_colors,
    main = paste("Total Distance Covered by Each Team, GameID: ", game_id),
    border = "white",
    cex = 0.8
  )
}

plot_total_distance_per_team(2022091106, data)
}
```

The plot_total_distance_per_team function is designed to analyze and visually represent the total distance covered by each team in a specific NFL game using a pie chart. When provided with a game_id and our dataset, the function first filters the dataset to include only relevant entries for the specified game and valid player identifiers. It then identifies the unique teams participating and calculates the cumulative distance each team has traveled by summing the distances covered by all its players across all plays and frames within the game. The pie chart displays the total yards traveled by the players each time throughout the course of the game. The labels comprehensively display the team name, total yards covered, and their corresponding percentage of the overall distance.

Our example graph using this function comes from a game between the Dolphins and the Patriots. This pie chart shows that the players from the Dolphins ran a total of 26,894 years throughout the course of the game, making up 51.4% of the total yardage in this game. The Patriots players ran 25,359 yards throughout the game, making 48.6% of the total yards run between the two teams.

```{r}
hist(plays$expectedPointsAdded, 
     main = "Expected Points Added for a Play",
     xlab = "Expected Points Added",
     col = "lightblue",
     xlim = c(-10, 10),
     border = "black",
     breaks = 20,
     las = 1
     )
```

The depicts a histogram illustrating the expected points added per play. The expected points added metric takes the difference between the expected points from the start and end of a given play. We added many features to this graph, including a customized amount of bins for the histogram and adding color to the bars to make them visually appealing. We also fitted the x-axis to cover the full range of possible EPAs. The output of this plot is interesting since it looks normally distributed with a skew to the right. This makes sense since the majority of plays would have little to no positive EPA.

Outside of the required plots, we also explored the relationship between yards gained and expected points added in the below plots. This exploration was inspired by our histogram.

```{r}
#Basic all plays analyzed

lmfs <- lm(expectedPointsAdded ~ playResult, data = plays)
summary(lmfs)
{
plot(plays$playResult, plays$expectedPointsAdded, main="Expected points added and yards gained on the play",
xlab = "Yards gained on the play", ylab = "Expected number of points added")
abline(reg = lmfs, col = "blue", lwd = 2)
}
```

This first plot is an examination of all plays run and analyzes the play result vs the expected points added by the play. Expected points added is calculated by taking the expected points value before and after the play and taking the difference between them. There is a moderate positive correlation between play result and expected points added which means that a positive play result moderately correlates with a positive expected points added.

```{r}
#Seperate by Formation
shotgun <- plays[plays$offenseFormation == "SHOTGUN",]
iform <- plays[plays$offenseFormation == "I_FORM",]
singleback <- plays[plays$offenseFormation == "SINGLEBACK",]
empty <- plays[plays$offenseFormation == "EMPTY",]
pistol <- plays[plays$offenseFormation == "PISTOL",]
wildcat <- plays[plays$offenseFormation == "WILDCAT",]
jumbo <- plays[plays$offenseFormation == "JUMBO",]

lmfs <- lm(expectedPointsAdded ~ playResult, data = shotgun)
summary(lmfs)

#Plot of all Shotgun plays
{plot(shotgun$playResult, shotgun$expectedPointsAdded, main="Expected points added based on yards gained on shotgun plays",
xlab = "Yards gained on the play", ylab = "Expected number of points added")
abline(lmfs, col = "blue", lwd = 2)}

```

This second plot is an examination of all plays run out of shotgun formation and analyzes the play result vs the expected points added by the play. Expected points added is calculated by taking the expected points value before and after the play and taking the difference between them. There is a moderate positive correlation between play result and expected points added which means that a positive play result moderately correlates with a positive expected points added. This correlation is slightly weaker than with all plays run, meaning that play results in shotgun correlates with expected points added less than overall.

```{r}
#Barplot of Average EPA by Formation
avgepa_shotgun <- sum(shotgun$expectedPointsAdded, na.rm = TRUE)/6382
avgepa_iform <- sum(iform$expectedPointsAdded, na.rm = TRUE)/933
avgepa_singleback <- sum(singleback$expectedPointsAdded, na.rm = TRUE)/3528
avgepa_empty <- sum(empty$expectedPointsAdded, na.rm = TRUE)/854
avgepa_pistol <- sum(pistol$expectedPointsAdded, na.rm = TRUE)/603
avgepa_wildcat <- sum(wildcat$expectedPointsAdded, na.rm = TRUE)/91
avgepa_jumbo <- sum(jumbo$expectedPointsAdded, na.rm = TRUE)/119

formation <- c("Shotgun",
          "I-Form", "Singleback","Empty",
          "Pistol", "Wildcat", "Jumbo")
average_epa <- c(avgepa_shotgun, avgepa_iform,
                 avgepa_singleback, avgepa_empty, avgepa_pistol,
                 avgepa_wildcat, avgepa_jumbo)
{par(mar = c(8,4,4,2) + 0.1)
barplot(average_epa, names.arg = formation, col = "blue",
main = "Average EPA by formation",
ylab = "Average EPA", las = 3)
mtext("Formations", side = 1, line = 6)}
```

This third plot is a barplot of average expected points added per play run out of each formation. Expected points added is calculated by taking the expected points value before and after the play and taking the difference between them. Empty formation had the highest expected points added per play, followed by shotgun and jumbo formation, with pistol formation having the lowest expected points added per play. This means that on average, empty formation generates the most expected points added per play, followed by shotgun and jumbo formation, with pistol formation on average generating the lowest expected points added per play.
