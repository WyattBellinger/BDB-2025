---
title: "NFL Tracking Data Project"
author: "Brady Detwiler, Devin Abraham, Dylan Rauum, Wyatt Bellinger"
format:

 pdf: default

fontsize: 10pt

geometry: margin=1in
---
```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```
  Our data set is player tracking data from the first nine weeks of the 2023-2024 NFL season. This is a subset of the full player tracking data. This data set has data for each player on the field for every 10th of a second. Some plays, for example, scrambles and completions, only include five frames before and after the action. Some of the main columns are gameID, which is a unique ID for each game, playID, which is a unique ID for each play, and nflID, which is a unique ID for each player. In addition, the set has x and y, which are the positions of the player on the field in the long and short way, respectively. S and a, which are the speed and acceleration of the player in yards per second and yards per second squared, respectively. We also have supplementary data which includes extra information about the players, overall game data, play by play data, and specific information on every tackle.


```{r, echo=FALSE}
library(nflverse)
library(tidyverse)
library(stringr)
library(dplyr)
library(readr)
library(data.table)
library(ggplot2)
library(treemapify)
library(ggradar)
library(RSQLite)

#This first section of code will be to explore the data, just to get some ideas of what to do
#make sure your directory call is right
#games <- read.csv('games.csv')
#players <- read.csv('players.csv')
#plays <- read.csv('plays.csv')
#tackles <- read.csv('tackles.csv')
#data <- read.csv('all_weeks_data.csv')

dcon <- dbConnect(SQLite(), dbname = "BDBStat405.db")
res <- dbSendQuery(conn = dcon, "
SELECT  AVG(a.nflId) as nflId, AVG(a.s) as avg_speed, MAX(a.s) as max_speed, 
AVG(a.a) as avg_accel, MAX(a.a) as max_accel, MIN(b.height) as height, 
AVG(b.weight) as weight, MIN(b.collegeName) as college, 
MIN(b.position) as position, MIN(b.birthDate) as birth_date, 
MIN(b.displayName) as name
FROM all_weeks_data as a
LEFT JOIN players as b
ON a.nflId = b.nflId
GROUP BY a.nflId
;
")
college_data <- dbFetch(res, -1)
dbClearResult(res)

college_data$avg_speed <- as.numeric(college_data$avg_speed)
college_data$max_speed <- as.numeric(college_data$max_speed)
college_data$avg_accel <- as.numeric(college_data$avg_accel)
college_data$max_accel <- as.numeric(college_data$max_accel)

convert_to_inches <- function(height) {
  parts <- strsplit(height, "-")[[1]]
  feet <- as.numeric(parts[1])
  inches <- as.numeric(parts[2])
  total_inches <- (feet * 12) + inches
  return(total_inches)
}

find_age <- function(year){
  birth_date <- strsplit(year, "-")[[1]]
  birth_year <- as.numeric(birth_date[1])
  return(2022-birth_year)
}

college_data['heightIN'] <- sapply(college_data$height, convert_to_inches)
college_data['age'] <- suppressWarnings(sapply(college_data$birth_date, find_age))
college_data <- college_data %>% filter(!is.na(nflId))


by_age <- college_data %>% group_by(age) %>% 
  summarise(mean_speed = mean(max_speed, na.rm = T), 
            mean_acceleration=mean(max_accel, na.rm=T ))%>%
  arrange(age) %>% filter(!is.na(age))

```

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM all_weeks_data 
;
")
data <- dbFetch(res, -1)
dbClearResult(res)

data$s <- as.numeric(data$s)
data$a <- as.numeric(data$a)
data$x <- as.numeric(data$x)
data$y <- as.numeric(data$y)
data$dis <- as.numeric(data$dis)
data$o <- as.numeric(data$o)
data$dir <- as.numeric(data$dir)
{
plot_player <- function(player_name, game_id, play_id, data, player_color) {
  player_data <- subset(data, displayName == player_name & gameId == game_id & playId == play_id)
  if (nrow(player_data) == 0) {
    warning(paste("No data found for", player_name, "in game", game_id, "and play", play_id))
    return(NULL)
  }
  lines(player_data$x, player_data$y, col = player_color, lwd = 2)
}

plot_play_movement <- function(game_id, play_id, data) {
  play_data <- subset(data, gameId == game_id & playId == play_id)
  
  if (nrow(play_data) == 0) {
    warning(paste("No data found for game", game_id, "and play", play_id))
    return(NULL)
  }
  teams <- unique(play_data$club[play_data$displayName != "football"])
  
  team_colors <- rainbow(length(teams))
  names(team_colors) <- teams
  
  football_color <- "brown"
  
  plot(NULL, xlim = c(0, 120), ylim = c(0, 53.3),
       xlab = 'X Position (yards)', ylab = 'Y Position (yards)',
       main = paste("Player Movements for Game", game_id, "Play", play_id))
  
  rect(0, 0, 120, 53.3, border = "green", lwd = 2)
  rect(0, 0, 10, 53.3, border = "black", lwd = 2)
  rect(110, 0, 120, 53.3, border = "black", lwd = 2)
  
  for (player in unique(play_data$displayName)) {
    if (player == "football") {
      player_color <- football_color
    } else {
      player_team <- unique(play_data$club[play_data$displayName == player])
      player_color <- team_colors[player_team]
    }
    plot_player(player, game_id, play_id, data, player_color)
  }
  
  legend_labels <- c(teams, "Football")
  legend_colors <- c(team_colors, football_color)
  legend("topright", legend = legend_labels, col = legend_colors, lwd = 2, bg = "white")
}

plot_play_movement(2022101603, 346, data) #convert to an animation
}
```

As our data is spatiotemporal in nature, it can be hard to visualize extactly what it is. To aid in that we created an animation which displays how the data can be interpreted. Each row of our data is the position and trajectory of a player in a given play, and the data is organized so that the rows are grouped by play, game, and frame so that every 23 rows is a frame of a given play. With this structure the data can be animated moving frame by frame to watch how a play develops.

The plot_player function is responsible for plotting the trajectory of an individual player. It takes the player's name, game ID, play ID, the dataset, and a designated color as inputs. The function filters the dataset to extract the relevant positional data for the specified player within the given game and play, and draws a colored line representing the player's movement across the field. The plot_play_movement function orchestrates the overall visualization for a particular play. It begins by subsetting the data for the specified game and play, identifying the unique teams involved, and assigning each team a distinct color, while the football is colored brown. The function then initializes an empty plot that accurately represents the dimensions of a football field, including the end zones. It iterates through each player involved in the play, invoking the plot_player function to draw their movement paths in their respective team colors. After plotting all player movements, plot_play_movement adds a legend to the top right corner of the plot, clearly indicating the teams and the football with their associated colors.

Our example graph using this function comes from a game between the Colts and the Jaguars. This play was a run play, during which the Jaguars running back ran for 25 yards, eventually being tackled out of bounds on the sideline.

```{r, echo=FALSE}

by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
by_age <- by_age[!is.na(by_age$mean_speed),]


```

Our initial goal with the data was to investigate NFL player athleticism and how it changed over time. To begin that exploration we dived into the flashiest trait a player can have, speed. One of the most eye catching traits on the football field was speed, so we wanted to look at how this athletic trait was affect by player age.


The below barplot displays the change in speed as a player ages. Across the x-axis are the ages in years of players ranging from 23 to 45, while in the y axis is speed. Speed is represented by the average max speed achieved by players in that age group.

```{r, echo=FALSE}


{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$mean_speed, ylim=c(0,10), xlim=c(0,23), ylab='Average Max Speed', xlab='Age', main='Average Max Speed of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_speed-.5), labels=round(by_age$mean_speed,1))
}

```

The speed plot seemed to show a pretty solid correlation that as players age, they become slower. The trend is very distinct between the ages of around 23-31, while more variance is shown in later ages. This variance makes sense as the vast majority of players are between the ages of 23-31, so the smaller sample size for larger ages explains this variation.

```{r, echo=FALSE}

speed_vs_age <- lm(avg_speed ~ age, college_data)


x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(speed_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 
#cor(no_missing$age, no_missing$avg_speed)

{plot(college_data$age, college_data$avg_speed, ylim=c(0,8), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Average Speed (yd/s)",
     main = "Relationship Between Age and Average Speed",)
abline(speed_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```

  Inspired by the above bar chart, we ran a linear regression on the speed and age data. The blue line is the resulting line of best fit, with the transparent red area being the confidence interval of the line. The data showed a negative correlation which was supported by both its correlation coefficient of -.1995, and its pvalue of 3.21e-12 which suggests a statistically significant relationship. This confirmed our earlier suspicions that players slow down as they age.

  Following our brief exploratory analysis of speed and age we wanted to see if speed favored any particular positions. 
```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM players 
;
")
players <- dbFetch(res, -1)
dbClearResult(res)
max_speeds <- aggregate(s ~ nflId, data = data, FUN = max)
max_speeds <- subset(max_speeds, max_speeds$s < 18)
max_speeds_with_positions <- merge(max_speeds, players, by = "nflId")
ggplot(max_speeds_with_positions, aes(x = position, y = s)) +
  geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
  labs(title = "Distribution of Max Speeds by Position",
       x = "Position",
       y = "Max Speed (yars/sec)") +
  theme_minimal()
```

  The following violin plot allows one to see the distribution of max speed (a numerical variable) among multiple positions (categorical groups). As is shown, some positions clearly have faster players on average which is shown by their densities being located higher in the violin plot. For example, the majority of cornerbacks are shown to have max speeds between 7.5 yards/s and 11 yards/s, while the majority of guards have max speeds between 5 yards/s and 8 yards/s. Also, it allows one to see which positions have a greater range of max speeds among players. For example, the violin plot for middle linebacker is much more dispersed than the one for nose tackle, showing how the range of max speeds among middle linebackers is greater than that of nose tackles. This graph is useful because it allows one to easily determine which positions have faster players on average, as well as the variations of max speed in a singular position.

```{r, echo=FALSE}
player_speed <- function(name){
  
  if (!(name %in% data$displayName)){
    return(FALSE)
  }
  player_name <- data[data$displayName == name, ]
  play_id <- sample(player_name$playId, 1)
  player_play <- player_name[player_name$playId == play_id, ]
  
  
  plot(player_play$frameId, player_play$s, type = "l",
       main = paste(name, "Play Speed Over Time"), 
       xlab = "Time Since Start of Play (Tenths of a Second)",
       ylab = "Speed (yards/second)", 
       col = "blue",           
       lwd = 2,               
       cex.main = 1.5,         
       cex.lab = 1.2,         
       cex.axis = 1.1,         
       font.main = 2,          
       las = 1,                
       bty = "l")              
  
  
  grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")
  

  
}


name = "Micah Parsons"
player_name <- data[data$displayName == name, ]
play_id <- 3183
player_play <- player_name[player_name$playId == play_id, ]

  
{
plot(player_play$frameId, player_play$s, type = "l",
     main = paste(name, "Play Speed Over Time"), 
     xlab = "Time Since Start of Play (Tenths of a Second)",
     ylab = "Speed (yards/second)", 
     col = "blue",           
     lwd = 2,               
     cex.main = 1.5,         
     cex.lab = 1.2,         
     cex.axis = 1.1,         
     font.main = 2,          
     las = 1,                
     bty = "l")              
}
```

  This function can take the name of any player and graph their speed in yards/second over time for a random play they were in. Utilizing the base R plot graphic, we enhanced the plot by including a title, axes titles, grid ticks, and dotted grid lines, among other features. We also created error checking to ensure that the input is included in the dataset. In the example, we look at Micah Parson’s speed every 10th of a second. We choose to look at Micah Parsons because he is an extremely explosive linebacker, which is a position with a lot of change of direction when getting off blocks and adjusting to tackling the ball carrier. His speed peaks at around 3.5 seconds into the play, likely when the tackle is made, followed by deceleration.

  This plot inspired us to look at acceleration as it showed how it is not just speed that is important, but also the ability to modulate between speeds and directions quickly to respond to the current gamestate.

```{r, echo=FALSE}
{barplot(by_age$mean_acceleration, ylim=c(0,13), xlim=c(0,23), ylab='Average Max Acceleration', xlab='Age', main='Average Max Acceleration of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_acceleration-.5), labels=round(by_age$mean_acceleration,1))}
```
  Our initial research into acceleration was a barplot similar to the one we had done for speed. The acceleration plot showed a much more stable trend, looking like acceleration stays constant through around age 32 before showing a pretty steady decrease between 33 and 36. The dearth of players age 36+ explains the more wild behaviour of the data past that point. The stability of the plot led us to believe that in general age has less of an impact on acceleration when compared to speed.

  Our final investigation into base athletic traits was weight. We wanted to explore weight as it is our closest approximation to strength assuming that in general increased weight on professional athletes would be muscle mass. Further, for weight we only looked at its variance under position as we believed that it would be much more reliant on position than the other athletic traits.

```{r, echo=FALSE}
players$weight <- as.numeric(players$weight)
ggplot(players) +
  aes(x = reorder(position, weight, median), y = weight) +
  geom_boxplot(fill = 'lightblue') +
  labs(title = "Distribution of Weight by Position",
       x = "Position",
       y = "Weight (lbs)")
```
  The following box plot allows one to see the distribution of weight (a numerical variable) among multiple positions (categorical groups). The boxes are organized in order of increasing median weight, with positions that have a higher median weight being located towards the right of the chart. As is shown, some positions clearly have heavier players on averages. For example, the majority of nose tackles fall between roughly 310 lbs (1st q) and 340 lbs (3rd q), while the majority of cornerbacks fall between roughly 185 lbs (1st 1) and 200 lbs (3rd q). Also, it allows one to see which positions have a greater range of weights among players. For example, the boxplot for outside linebackers shows an interquartile range of around 50 pounds, while the box plots for quarterbacks was only around 10 pounds. This graph is useful because it allows one to easily determine which positions have heavier players on average, as well as the variations of weight in a singular position.


  Upon the conclusion of our investigation of 3 basic athletic traits provided in the data, we wanted to evolve our methodology to attempt to capture NFL player athleticism as a whole through the creation of an athleticism score.
```{r, echo=FALSE}


z_score <- function(column){
  scoring_data <- college_data %>% filter()
  col_mean <- mean(college_data[[column]], na.rm=TRUE)
  col_sd <- sd(college_data[[column]], na.rm=TRUE)
  name <- paste(as.character(column), "score", sep='_')
  college_data[[name]] <<- (college_data[[column]] - col_mean) / col_sd
  
}

for (trait in list(quote(heightIN),quote(weight), quote(max_speed), quote(max_accel), quote(avg_speed), quote(avg_accel))){
  z_score(trait)
}

college_data['Athleticism_Score']<- college_data$heightIN_score+ college_data$weight_score+ college_data$max_speed_score + college_data$max_accel_score + college_data$avg_speed_score + college_data$avg_accel_score


player_radar_chart <- function(player){
  player_data<-college_data[college_data$name=="Tyreek Hill",13:19]
  total_score <- round(college_data[college_data$name==player,20][[1]], digits=2)
 
  ggradar(player_data, grid.min=-5, grid.max=5, grid.mid=0, grid.label.size = 3, 
          values.radar = c(-5,0,5), gridline.mid.colour = 'blue', group.point.size = 3,
          group.line.width = .75, fill=TRUE, fill.alpha = .25, 
          axis.labels = c("Height Score", "Weight Score", "Max \nSpeed Score", 
                          "Max Acceleration Score", "Avg \nSpeed Score", 
                          "Avg \nAcceleration \nScore"),
          axis.label.size = 4, plot.title = paste(player, "Athletic Traits Chart")) +
      annotate("text", x = 12, y = 12, label = paste("Total Athleticism Score: \n",
                                                    total_score))
}

player_radar_chart("Tyreek Hill")



```

To do so we implemented a rudimentary athleticism score. This score is created by taking the 6 athletic traits provided in the data (height, weight, avg acceleration, avg speed, max speed, max acceleration) and creating z-scores for each, with the z-score being the player's score. To create the total athleticism score the scores for each individual trait was summed. We decided on this as all else equal, improving one of these traits meant an increase in athleticism. This is because if you are ten pounds heavier but can run the same speed as someone else, you are relatively more athletic. To plot this data we used radar charts where each point on the circle is the player score, and the blue dotted line is the average for each score. This allows a clear way to see above and below average traits by looking at the point in reference to the average marking. On the plot we also added the total athleticism score to further contextualize the player.

```{r, echo=FALSE}

grouppos <- function(df){
  unique_items<-unique(df$position)
  grouped_data <- data.frame(position=character(),
                             mean_speed_score=double(),
                             mean_acceleration_score=double(),
                             max_acceleration_score=double(),
                             max_speed_score=double(),
                             height_score=double(),
                             weight_score=double(),
                             athleticism_score=double(),
                             stringsAsFactors = FALSE)
  for (token in unique_items){
    individ_data <-df[df$position==token,]
    meanspeedscore <- mean(individ_data$avg_speed_score, na.rm=TRUE)
    meanaccelscore <- mean(individ_data$avg_accel_score, na.rm=TRUE)
    maxaccelscore <- mean(individ_data$max_accel_score, na.rm=TRUE)
    maxspeedscore <- mean(individ_data$max_speed_score, na.rm=TRUE)
    heightscore <- mean(individ_data$heightIN_score, na.rm=TRUE)
    weightscore <- mean(individ_data$weight_score, na.rm=TRUE)
    athleticismscore <- mean(individ_data$Athleticism_Score, na.rm=TRUE)
    grouped_data <- rbind(grouped_data, data.frame(
      position=token,
      mean_speed_score=meanspeedscore,
      mean_acceleration_score=meanaccelscore,
      max_acceleration_score=maxaccelscore,
      max_speed_score=maxspeedscore,
      height_score=heightscore,
      weight_score=weightscore,
      athleticism_score=athleticismscore,
      stringsAsFactors = FALSE
    ))
  }
  return(grouped_data)
}

position_data <- grouppos(college_data)
position_data <- position_data[order(position_data$athleticism_score),]

ggplot(position_data, aes(x = reorder(position, athleticism_score), y = athleticism_score, fill = athleticism_score > 0)) +
  geom_bar(stat="identity") + 
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"))+
  coord_flip() + 
  theme_minimal() + 
  labs(title = "Diverging Plot by Position", x = "Position", y = "Athleticism") +
  theme(legend.position = "none")


```

Because our creation of athleticism score was done ignoring position, we wanted to see how the score would look across various positions. We assumed that in particular offensive line positions would be disadvantaged as in game they have are not running or accelerating at full speed, hurting their scores their, and our score does not directly factor in traits like strength where they would have a large advantage. Through a differential plot we confirmed our hypothesis as the bottom 4 positions by athleticism score were linemen. Outside of DB, which had very few players, the rest of the positions made sense as they are generally above average in height and weight for the NFL and would have opportunities to sprint frequently, enabling a good showing in our athleticism score. This made us realize that our initial methodology was likely flawed as in general the athleticism across positions should be relatively equal, meaning that the average for each position should be around 0. To fix this we recreated our process but based the z-scores on position so each player could be more fairly evaluated.

```{r, echo=FALSE}
z_score_by_position <- function(column, pos){
  scoring_data <- college_data %>% filter(position==pos)
  col_mean <- mean(scoring_data[[column]], na.rm=TRUE)
  col_sd <- sd(scoring_data[[column]], na.rm=TRUE)
  name <- paste(pos, as.character(column), "score", sep='_')
  college_data[[name]] <<- (college_data[[column]] - col_mean) / col_sd
}

for (trait in list(quote(heightIN),quote(weight), quote(max_speed), quote(max_accel), quote(avg_speed), quote(avg_accel))){
  for (posit in unique(college_data$position)){
    z_score_by_position(trait, posit)
  }
}

for (posit in unique(college_data$position)){
  
  height_score_col <- paste(posit, 'heightIN_score', sep = "_")
  weight_score_col <- paste(posit, 'weight_score', sep = "_")
  max_speed_col <- paste(posit, 'max_speed_score', sep = "_")
  max_accel_col <- paste(posit, 'max_accel_score', sep = "_")
  avg_speed_col <- paste(posit, 'avg_speed_score', sep = "_")
  avg_accel_col <- paste(posit, 'avg_accel_score', sep = "_")
  
  name <- paste(posit, 'Athleticism_Score', sep="_" )
  
  college_data[[name]] <- college_data[[height_score_col]] + 
    college_data[[weight_score_col]] + 
    college_data[[max_speed_col]] + 
    college_data[[max_accel_col]] + 
    college_data[[avg_speed_col]] + 
    college_data[[avg_accel_col]]
}


player_radar_chart_pos_adj <- function(player){
  player_data<-college_data[college_data$name==player,]
  pos <- unique(player_data$position)
  
  height_score_col <- paste(pos, 'heightIN_score', sep = "_")
  weight_score_col <- paste(pos, 'weight_score', sep = "_")
  max_speed_col <- paste(pos, 'max_speed_score', sep = "_")
  max_accel_col <- paste(pos, 'max_accel_score', sep = "_")
  avg_speed_col <- paste(pos, 'avg_speed_score', sep = "_")
  avg_accel_col <- paste(pos, 'avg_accel_score', sep = "_")
  total_score_col <- paste(pos, 'Athleticism_Score', sep="_" )
  col_list <- c("age",height_score_col, weight_score_col, max_speed_col, max_accel_col, 
                avg_speed_col, avg_accel_col)
  
  player_data <- college_data[college_data$name==player,col_list]
  
  total_score <- round(college_data[college_data$name==player,total_score_col][[1]], digits=2)
 
  ggradar(player_data, grid.min=-5, grid.max=5, grid.mid=0, grid.label.size = 3, 
          values.radar = c(-5,0,5), gridline.mid.colour = 'blue', group.point.size = 3,
          group.line.width = .75, fill=TRUE, fill.alpha = .25, 
          axis.labels = c("Height Score", "Weight Score", "Max \nSpeed Score", 
                          "Max Acceleration Score", "Avg \nSpeed Score", 
                          "Avg \nAcceleration \nScore"),
          axis.label.size = 4, plot.title = paste(player, "Athletic Traits Chart")) +
      annotate("text", x = 12, y = 12, label = paste("Total Athleticism Score: \n",
                                                    total_score))
}

player_radar_chart_pos_adj("Tyreek Hill")
```

Above is the same radar plot but with our adjusted athleticism score. This chart was promising for us as it seemed to visually maintain the shape of the non-adjusted plot. This meant that our new way of scoring maintained the previous relationships it discovered.
```{r, echo=FALSE}
player_radar_chart("Tristan Wirfs")
```
```{r, echo=FALSE}
player_radar_chart_pos_adj("Tristan Wirfs")
```
Further, when looking at players at formerly disadvantaged positions likes offensive tackle, we found significant improvement of some of their scores, showing that we were better capturing their contributions in context. For example, Tristan Wirfs total score improved by about a point and a half once adjusting for his position.

```{r, echo=FALSE}
college_data$final_score <- NA
for (i in 1:nrow(college_data)) {
  posit <- college_data$position[i]  
  score_col <- paste(posit, 'Athleticism_Score', sep = "_")  
  college_data$final_score[i] <- college_data[[score_col]][i] 
}

position_data_adj <- college_data %>% group_by(position) %>% 
  summarise(athleticism_score = mean(final_score))

ggplot(position_data_adj, aes(x = reorder(position, athleticism_score), y = athleticism_score, fill = athleticism_score > 0)) +
  geom_bar(stat="identity") + 
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"))+
  coord_flip() + 
  theme_minimal() + 
  labs(title = "Diverging Plot by Position", x = "Position", y = "Athleticism") +
  theme(legend.position = "none")+
  ylim(-1, 1) 
```
This plot may look blank, but that is actually a great thing. That indicates that we were successful in creating a way to score athleticism in a fair manner that less penalized positions that due to the data did not have a great way to display their traits as discussed above.

With our new athleticism metric, we wanted to explore its relationship to age, much like we had done for speed. 

```{r, echo=FALSE}
by_age <- college_data %>% group_by(age) %>% 
  summarise(ath_score = mean(final_score, na.rm=TRUE)) %>%
  arrange(age) %>% filter(!is.na(age))

by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
by_age <- by_age[!is.na(by_age$ath_score),]

colors <- ifelse(by_age$ath_score > 0, "green", "red")

{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$ath_score, ylim=c(-4, 4), xlim=c(0,23), ylab='Average Athleticism Score', xlab='Age', main='Average Athleticism Score of Players by Age', col = colors)
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=ifelse(by_age$ath_score>0,(by_age$ath_score+1), by_age$ath_score - 1), labels=round(by_age$ath_score, 1))
}
```
This plot generally confirmed that as players age, athleticism wanes. If athleticism were evenly distributed we would expect that each ages would be aproximately 0. But, the majority of players are between the ages of 23-30 and those average to about 0 while past thirty athleticism is consistently very low.
```{r, echo=FALSE}
ath_vs_age <- lm(final_score ~ age, college_data)

x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(ath_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 


{plot(college_data$age, college_data$final_score, ylim=c(-5,5), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Athletic Score Years)",
     main = "Relationship Between Age and Athletic Score",)
abline(ath_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```
This plot confirmed our suspicions as it displays a statistically significant negative correlation between age and athleticism. 

  With our newly created athleticism score we wanted to transition from our basic initial question of how player athleticism changes as they age onto how player and team athleticism impacts team success.
  
```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM plays 
;
")
plays <- dbFetch(res, -1)
plays_defenders <- plays %>%
  mutate(defenders = str_extract(playDescription, "\\(([A-Za-z\\.\\s;'-]+)\\)\\.?$")) %>%
    filter(!is.na(defenders)) %>%
      mutate(
        defenders = str_replace_all(defenders, "[\\(\\)]", ""),
        defenders = str_replace_all(defenders, "(\\b[A-Z])\\.", "\\1\\. "),
      )

defender_list <- strsplit(plays_defenders$defenders, ";\\s*")
defenders_all <- data.frame(defenders = unlist(defender_list))

defender_counts_full <- defenders_all %>%
  group_by(defenders) %>%
    summarise(count = n()) %>%
      arrange(desc(count))
defender_counts <- head(defender_counts_full, 10)

ggplot(defender_counts, aes(x = reorder(defenders, count), y = count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Top 10 Defenders by Number of Impacts",
    x = "Defender",
    y = "Number of Impacts"
  ) +
  theme_minimal()

```
Starting on the defensive side of the ball, qe wanted to find out if defensive impact players correlated to athleticism. To start that analysis we used text mining to get the impactful defensive players from the play description. This enabled us to find the most impactful defensive players, plotted above. 

```{r, echo=FALSE}
college_data <- mutate(college_data, transformed_name = str_replace(name, "^(\\w)\\w*\\s(\\w+)$", "\\1. \\2."))

defender_counts_full <- left_join(defender_counts_full, select(college_data, final_score, transformed_name), by = join_by(defenders == transformed_name))

ggplot(defender_counts_full, aes(x = count, y = final_score)) +
  geom_point(alpha = 0.6, color = "darkblue", size = 3) + # Base scatter points
  stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = 0.4) + # Density overlay
  scale_fill_viridis_c(option = "C") + # Gradient color scale
  labs(
    title = "Impact Plays vs Athletic Score for NFL Defensive Players",
    x = "Impact Plays",
    y = "Athletic Score",
    fill = "Density"
  ) +
  theme_minimal(base_size = 14) +
  theme(legend.position = "right")


```


```{r, echo=FALSE}


split_plays_data <- split(plays, plays$ballCarrierDisplayName)
epa_data <- lapply(split_plays_data, function(subset_df){mean(subset_df$expectedPointsAdded)
})

split_college_data <- split(college_data, college_data$name)
athleticism_data <- lapply(split_college_data, function(subset_df){mean(subset_df$Athleticism_Score)})

epa_df <- data.frame(name = names(epa_data), list_value = unlist(epa_data))
athleticism_df <- data.frame(name = names(athleticism_data), list_value = unlist(athleticism_data))

merged_df <- merge(epa_df, athleticism_df, by = "name")
```

```{r, echo=FALSE}
ggplot(merged_df, aes(x = list_value.y, y = list_value.x)) +
  geom_point() + 
  geom_smooth(method = "lm", col = "blue") + 
  labs(title = "Scatter Plot of Athleticism vs Average Offensive EPA Scores by Player", 
       y = "Average Offensive EPA by Player", x = "Athleticism Score") + 
  theme_minimal()

```





```{r, echo=FALSE}
#This is the code for the initial plot that animates it
library(farver)
library(teamcolors)

team_name_mapping <- list(
  ARI = "Arizona Cardinals", ATL = "Atlanta Falcons", BAL = "Baltimore Ravens",
  BUF = "Buffalo Bills", CAR = "Carolina Panthers", CHI = "Chicago Bears",
  CIN = "Cincinnati Bengals", CLE = "Cleveland Browns", DAL = "Dallas Cowboys",
  DEN = "Denver Broncos", DET = "Detroit Lions", GB  = "Green Bay Packers",
  HOU = "Houston Texans", IND = "Indianapolis Colts", JAX = "Jacksonville Jaguars",
  KC  = "Kansas City Chiefs", LAC = "Los Angeles Chargers", LAR = "Los Angeles Rams",
  LV  = "Las Vegas Raiders", MIA = "Miami Dolphins", MIN = "Minnesota Vikings",
  NE  = "New England Patriots", NO  = "New Orleans Saints", NYG = "New York Giants",
  NYJ = "New York Jets", PHI = "Philadelphia Eagles", PIT = "Pittsburgh Steelers",
  SEA = "Seattle Seahawks", SF  = "San Francisco 49ers", TB  = "Tampa Bay Buccaneers",
  TEN = "Tennessee Titans", WAS = "Washington Commanders")

hex_to_rgb <- function(hex) {
  rgb <- col2rgb(hex) / 255
  return(as.numeric(rgb))
}

lab_distance <- function(color1, color2) {
  rgb1 <- as.numeric(col2rgb(color1))
  rgb2 <- as.numeric(col2rgb(color2))

  lab1 <- farver::convert_colour(matrix(rgb1, nrow = 1), from = "rgb", to = "lab")
  lab2 <- farver::convert_colour(matrix(rgb2, nrow = 1), from = "rgb", to = "lab")

  return(sqrt(sum((lab1 - lab2) ^ 2)))
}

nfl_teams <- subset(teamcolors, league == "nfl")
nfl_team_colors <- setNames(nfl_teams$primary, nfl_teams$name)
nfl_team_secondary_colors <- setNames(nfl_teams$secondary, nfl_teams$name)

plot_play_movement <- function(game_id, play_id, data) {
  play_data <- subset(data, gameId == game_id & playId == play_id)

  teams <- unique(play_data$club[play_data$displayName != "football"])

  full_team_names <- sapply(teams, function(code) team_name_mapping[[code]])
  team_colors <- nfl_team_colors[full_team_names]
  
  for (i in 1:(length(team_colors) - 1)) {
    for (j in (i + 1):length(team_colors)) {
      if (lab_distance(team_colors[i], team_colors[j]) < 40) {
        team_name <- names(team_colors)[i]
        team_colors[i] <- nfl_team_secondary_colors[team_name]
      }
    }
  }
  
  football_color <- "brown"
  
  frame_ids <- sort(unique(play_data$frameId))
  
  for (frame in frame_ids) {
    frame_data <- subset(play_data, frameId <= frame)

    plot.new()
    plot.window(xlim = c(0, 140), ylim = c(0, 53.3))

    rect(0, 0, 120, 53.3, border = "darkgreen", lwd = 2)
    rect(0, 0, 10, 53.3, border = "black", lwd = 2)
    rect(110, 0, 120, 53.3, border = "black", lwd = 2)

    yard_labels <- c(10, 20, 30, 40, 50, 40, 30, 20, 10)
    yard_positions <- seq(20, 100, by = 10)

    for (i in seq_along(yard_positions)) {
      yard <- yard_positions[i]
      abline(v = yard, col = "lightgray", lty = "dashed")
      text(x = yard, y = 1.7, labels = yard_labels[i], col = "darkgray", cex = 1.3, font = 2)
      text(x = yard, y = 51.6, labels = yard_labels[i], col = "darkgray", cex = 1.3, font = 2)
    }

    title(main = paste("Play", play_id, "from", full_team_names[1], 
                       "vs.", full_team_names[2]))

    for (player in unique(frame_data$displayName)) {
      player_data <- subset(frame_data, displayName == player)
      if (player == "football") {
        player_color <- football_color
      } else {
        player_team <- unique(player_data$club)
        full_team_name <- team_name_mapping[[player_team]]
        player_color <- team_colors[full_team_name]
      }
      lines(player_data$x, player_data$y, col = player_color, lwd = 2)
      points(player_data$x[nrow(player_data)], player_data$y[nrow(player_data)], 
             col = player_color, pch = 16)
    }

    legend_labels <- c(teams, "Football")
    legend_colors <- c(team_colors, football_color)
    legend(x = 122, y = 53.3, legend = legend_labels, col = legend_colors, lwd = 2, 
           bg = "white", xpd = TRUE, bty = "n", cex = 1, text.col = "black")

    Sys.sleep(0.1)
  }
}

#plot_play_movement(2022101603, 346, data)
```







