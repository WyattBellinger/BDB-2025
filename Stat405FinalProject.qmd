---
title: "Importance of Athleticism in the NFL"
subtitle: "Stat 405 Final Project"
format:
  revealjs: 
    # embed-resources: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
    footer: STAT 405 - Devin Abraham - Wyatt Bellinger - Brady Detwiler - Dylan Raaum - Source [quarto.org/revealjs](https://quarto.org/docs/presentations/revealjs/)
server: shiny
---

# Explaining the Data  {background="#6B6B6B"}

## Data Introduction

- Our Data is NFL Player Tracking data
- Shows position of every player every 10th of a second
- Supplementary Data includes specific information on the players, overall play by play data, and overall game data.
```{r, echo=FALSE}
library(nflverse)
library(tidyverse)
library(stringr)
library(dplyr)
library(readr)
library(data.table)
library(ggplot2)
library(treemapify)
library(ggradar)
library(RSQLite)

#This first section of code will be to explore the data, just to get some ideas of what to do
#make sure your directory call is right
#games <- read.csv('games.csv')
#players <- read.csv('players.csv')
#plays <- read.csv('plays.csv')
#tackles <- read.csv('tackles.csv')
#data <- read.csv('all_weeks_data.csv')

dcon <- dbConnect(SQLite(), dbname = "BDBStat405.db")

res <- dbSendQuery(conn = dcon, "
SELECT  AVG(a.nflId) as nflId, AVG(a.s) as avg_speed, MAX(a.s) as max_speed, 
AVG(a.a) as avg_accel, MAX(a.a) as max_accel, MIN(b.height) as height, 
AVG(b.weight) as weight, MIN(b.collegeName) as college, 
MIN(b.position) as position, MIN(b.birthDate) as birth_date, 
MIN(b.displayName) as name
FROM all_weeks_data as a
LEFT JOIN players as b
ON a.nflId = b.nflId
GROUP BY a.nflId
;
")
college_data <- dbFetch(res, -1)
dbClearResult(res)

college_data$avg_speed <- as.numeric(college_data$avg_speed)
college_data$max_speed <- as.numeric(college_data$max_speed)
college_data$avg_accel <- as.numeric(college_data$avg_accel)
college_data$max_accel <- as.numeric(college_data$max_accel)

slanted_mean <- function(data){
  lower_bound <- quantile(data, 0.05)
  upper_bound <- quantile(data, 0.95)
  new_data <- data[data>lower_bound & data<upper_bound]
  return(mean(new_data, na.rm=TRUE))
}

convert_to_inches <- function(height) {
  parts <- strsplit(height, "-")[[1]]
  feet <- as.numeric(parts[1])
  inches <- as.numeric(parts[2])
  total_inches <- (feet * 12) + inches
  return(total_inches)
}

find_age <- function(year){
  birth_date <- strsplit(year, "-")[[1]]
  birth_year <- as.numeric(birth_date[1])
  return(2022-birth_year)
}

college_data['heightIN'] <- sapply(college_data$height, convert_to_inches)
college_data['age'] <- suppressWarnings(sapply(college_data$birth_date, find_age))
college_data <- college_data %>% filter(!is.na(nflId))


by_age <- college_data %>% group_by(age) %>% 
  summarise(mean_speed = mean(max_speed, na.rm = T), 
            mean_acceleration=mean(max_accel, na.rm=T ))%>%
  arrange(age) %>% filter(!is.na(age))

```

## Visualizing the Data

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM all_weeks_data 
;
")
data <- dbFetch(res, -1)
dbClearResult(res)

data$s <- as.numeric(data$s)
data$a <- as.numeric(data$a)
data$x <- as.numeric(data$x)
data$y <- as.numeric(data$y)
data$dis <- as.numeric(data$dis)
data$o <- as.numeric(data$o)
data$dir <- as.numeric(data$dir)
{
plot_player <- function(player_name, game_id, play_id, data, player_color) {
  player_data <- subset(data, displayName == player_name & gameId == game_id & playId == play_id)
  if (nrow(player_data) == 0) {
    warning(paste("No data found for", player_name, "in game", game_id, "and play", play_id))
    return(NULL)
  }
  lines(player_data$x, player_data$y, col = player_color, lwd = 2)
}

plot_play_movement <- function(game_id, play_id, data) {
  play_data <- subset(data, gameId == game_id & playId == play_id)
  
  if (nrow(play_data) == 0) {
    warning(paste("No data found for game", game_id, "and play", play_id))
    return(NULL)
  }
  teams <- unique(play_data$club[play_data$displayName != "football"])
  
  team_colors <- rainbow(length(teams))
  names(team_colors) <- teams
  
  football_color <- "brown"
  
  plot(NULL, xlim = c(0, 120), ylim = c(0, 53.3),
       xlab = 'X Position (yards)', ylab = 'Y Position (yards)',
       main = paste("Player Movements for Game", game_id, "Play", play_id))
  
  rect(0, 0, 120, 53.3, border = "green", lwd = 2)
  rect(0, 0, 10, 53.3, border = "black", lwd = 2)
  rect(110, 0, 120, 53.3, border = "black", lwd = 2)
  
  for (player in unique(play_data$displayName)) {
    if (player == "football") {
      player_color <- football_color
    } else {
      player_team <- unique(play_data$club[play_data$displayName == player])
      player_color <- team_colors[player_team]
    }
    plot_player(player, game_id, play_id, data, player_color)
  }
  
  legend_labels <- c(teams, "Football")
  legend_colors <- c(team_colors, football_color)
  legend("topright", legend = legend_labels, col = legend_colors, lwd = 2, bg = "white")
}

plot_play_movement(2022101603, 346, data) #convert to an animation
}
```

# Exploration of Speed {background="#6B6B6B"}

## Speed

- Wanted to look at athletic traits of players
- One of the most impressive and impactful traits is speed

```{r, echo=FALSE}

by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
by_age <- by_age[!is.na(by_age$mean_speed),]


```

## Speed by Age

```{r, echo=FALSE}


{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$mean_speed, ylim=c(0,10), xlim=c(0,23), ylab='Average Max Speed', xlab='Age', main='Average Max Speed of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_speed-.5), labels=round(by_age$mean_speed,1))
}

```

## Regression of Age and Speed

```{r, echo=FALSE}

speed_vs_age <- lm(avg_speed ~ age, college_data)
#summary(speed_vs_age)

x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(speed_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 
#cor(no_missing$age, no_missing$avg_speed)

{plot(college_data$age, college_data$avg_speed, ylim=c(0,8), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Average Speed (yd/s)",
     main = "Relationship Between Age and Average Speed",)
abline(speed_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```

## Speed by Position

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM players 
;
")
players <- dbFetch(res, -1)
dbClearResult(res)
max_speeds <- aggregate(s ~ nflId, data = data, FUN = max)
max_speeds <- subset(max_speeds, max_speeds$s < 18)
max_speeds_with_positions <- merge(max_speeds, players, by = "nflId")
ggplot(max_speeds_with_positions, aes(x = position, y = s)) +
  geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
  labs(title = "Distribution of Max Speeds by Position",
       x = "Position",
       y = "Max Speed (yars/sec)") +
  theme_minimal()
```

# Exploration of Acceleration {background="#6B6B6B"}

## Speed Change During a Play
::: columns
::: {.column width="35%"}
- Acceleration is next step
- As can be seen below, speed can vary over a play significantly
:::
::: {.column width="3%"}
:::
::: {.column width="60%"}
```{r, echo=FALSE}
player_speed <- function(name){
  
  if (!(name %in% data$displayName)){
    return(FALSE)
  }
  player_name <- data[data$displayName == name, ]
  play_id <- sample(player_name$playId, 1)
  player_play <- player_name[player_name$playId == play_id, ]
  
  
  plot(player_play$frameId, player_play$s, type = "l",
       main = paste(name, "Play Speed Over Time"), 
       xlab = "Time Since Start of Play (Tenths of a Second)",
       ylab = "Speed (yards/second)", 
       col = "blue",           
       lwd = 2,               
       cex.main = 1.5,         
       cex.lab = 1.2,         
       cex.axis = 1.1,         
       font.main = 2,          
       las = 1,                
       bty = "l")              
  
  
  grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")
  

  
}


name = "Micah Parsons"
player_name <- data[data$displayName == name, ]
play_id <- 3183
player_play <- player_name[player_name$playId == play_id, ]

  
{
plot(player_play$frameId, player_play$s, type = "l",
     main = paste(name, "Play Speed Over Time"), 
     xlab = "Time Since Start of Play (Tenths of a Second)",
     ylab = "Speed (yards/second)", 
     col = "blue",           
     lwd = 2,               
     cex.main = 1.5,         
     cex.lab = 1.2,         
     cex.axis = 1.1,         
     font.main = 2,          
     las = 1,                
     bty = "l")              
}
```
:::
:::
## Acceleration by Age

```{r, echo=FALSE}
{barplot(by_age$mean_acceleration, ylim=c(0,13), xlim=c(0,23), ylab='Average Max Acceleration', xlab='Age', main='Average Max Acceleration of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_acceleration-.5), labels=round(by_age$mean_acceleration,1))}
```

# Athleticism Score {background="#6B6B6B"}

## Non Adjusted Score
```{r, echo=FALSE}


z_score <- function(column){
  scoring_data <- college_data %>% filter()
  col_mean <- mean(college_data[[column]], na.rm=TRUE)
  col_sd <- sd(college_data[[column]], na.rm=TRUE)
  name <- paste(as.character(column), "score", sep='_')
  college_data[[name]] <<- (college_data[[column]] - col_mean) / col_sd
  
}

for (trait in list(quote(heightIN),quote(weight), quote(max_speed), quote(max_accel), quote(avg_speed), quote(avg_accel))){
  z_score(trait)
}

college_data['Athleticism_Score']<- college_data$heightIN_score+ college_data$weight_score+ college_data$max_speed_score + college_data$max_accel_score + college_data$avg_speed_score + college_data$avg_accel_score


player_radar_chart <- function(player){
  player_data<-college_data[college_data$name==player,13:19]
  total_score <- round(college_data[college_data$name==player,20][[1]], digits=2)
 
  ggradar(player_data, grid.min=-5, grid.max=5, grid.mid=0, grid.label.size = 3, 
          values.radar = c(-5,0,5), gridline.mid.colour = 'blue', group.point.size = 3,
          group.line.width = .75, fill=TRUE, fill.alpha = .25, 
          axis.labels = c("Height Score", "Weight Score", "Max \nSpeed Score", 
                          "Max Acceleration Score", "Avg \nSpeed Score", 
                          "Avg \nAcceleration \nScore"),
          axis.label.size = 4, plot.title = paste(player, "Athletic Traits Chart")) +
      annotate("text", x = 12, y = 12, label = paste("Total Athleticism Score: \n",
                                                    total_score))
}

player_radar_chart("Tyreek Hill")



```

## Score Issues

```{r, echo=FALSE}

grouppos <- function(df){
  unique_items<-unique(df$position)
  grouped_data <- data.frame(position=character(),
                             mean_speed_score=double(),
                             mean_acceleration_score=double(),
                             max_acceleration_score=double(),
                             max_speed_score=double(),
                             height_score=double(),
                             weight_score=double(),
                             athleticism_score=double(),
                             stringsAsFactors = FALSE)
  for (token in unique_items){
    individ_data <-df[df$position==token,]
    meanspeedscore <- mean(individ_data$avg_speed_score, na.rm=TRUE)
    meanaccelscore <- mean(individ_data$avg_accel_score, na.rm=TRUE)
    maxaccelscore <- mean(individ_data$max_accel_score, na.rm=TRUE)
    maxspeedscore <- mean(individ_data$max_speed_score, na.rm=TRUE)
    heightscore <- mean(individ_data$heightIN_score, na.rm=TRUE)
    weightscore <- mean(individ_data$weight_score, na.rm=TRUE)
    athleticismscore <- mean(individ_data$Athleticism_Score, na.rm=TRUE)
    grouped_data <- rbind(grouped_data, data.frame(
      position=token,
      mean_speed_score=meanspeedscore,
      mean_acceleration_score=meanaccelscore,
      max_acceleration_score=maxaccelscore,
      max_speed_score=maxspeedscore,
      height_score=heightscore,
      weight_score=weightscore,
      athleticism_score=athleticismscore,
      stringsAsFactors = FALSE
    ))
  }
  return(grouped_data)
}

position_data <- grouppos(college_data)
position_data <- position_data[order(position_data$athleticism_score),]

ggplot(position_data, aes(x = reorder(position, athleticism_score), y = athleticism_score, fill = athleticism_score > 0)) +
  geom_bar(stat="identity") + 
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"))+
  coord_flip() + 
  theme_minimal() + 
  labs(title = "Diverging Plot by Position", x = "Position", y = "Athleticism") +
  theme(legend.position = "none")


```

## Adjusted Score {.auto-animate}

```{r, echo=FALSE}
z_score_by_position <- function(column, pos){
  scoring_data <- college_data %>% filter(position==pos)
  col_mean <- mean(scoring_data[[column]], na.rm=TRUE)
  col_sd <- sd(scoring_data[[column]], na.rm=TRUE)
  name <- paste(pos, as.character(column), "score", sep='_')
  college_data[[name]] <<- (college_data[[column]] - col_mean) / col_sd
}

for (trait in list(quote(heightIN),quote(weight), quote(max_speed), quote(max_accel), quote(avg_speed), quote(avg_accel))){
  for (posit in unique(college_data$position)){
    z_score_by_position(trait, posit)
  }
}

for (posit in unique(college_data$position)){
  
  height_score_col <- paste(posit, 'heightIN_score', sep = "_")
  weight_score_col <- paste(posit, 'weight_score', sep = "_")
  max_speed_col <- paste(posit, 'max_speed_score', sep = "_")
  max_accel_col <- paste(posit, 'max_accel_score', sep = "_")
  avg_speed_col <- paste(posit, 'avg_speed_score', sep = "_")
  avg_accel_col <- paste(posit, 'avg_accel_score', sep = "_")
  
  name <- paste(posit, 'Athleticism_Score', sep="_" )
  
  college_data[[name]] <- college_data[[height_score_col]] + 
    college_data[[weight_score_col]] + 
    college_data[[max_speed_col]] + 
    college_data[[max_accel_col]] + 
    college_data[[avg_speed_col]] + 
    college_data[[avg_accel_col]]
}


player_radar_chart_pos_adj <- function(player){
  player_data<-college_data[college_data$name==player,]
  pos <- unique(player_data$position)
  
  height_score_col <- paste(pos, 'heightIN_score', sep = "_")
  weight_score_col <- paste(pos, 'weight_score', sep = "_")
  max_speed_col <- paste(pos, 'max_speed_score', sep = "_")
  max_accel_col <- paste(pos, 'max_accel_score', sep = "_")
  avg_speed_col <- paste(pos, 'avg_speed_score', sep = "_")
  avg_accel_col <- paste(pos, 'avg_accel_score', sep = "_")
  total_score_col <- paste(pos, 'Athleticism_Score', sep="_" )
  col_list <- c("age",height_score_col, weight_score_col, max_speed_col, max_accel_col, 
                avg_speed_col, avg_accel_col)
  
  player_data <- college_data[college_data$name==player,col_list]
  
  total_score <- round(college_data[college_data$name==player,total_score_col][[1]], digits=2)
 
  ggradar(player_data, grid.min=-5, grid.max=5, grid.mid=0, grid.label.size = 3, 
          values.radar = c(-5,0,5), gridline.mid.colour = 'blue', group.point.size = 3,
          group.line.width = .75, fill=TRUE, fill.alpha = .25, 
          axis.labels = c("Height Score", "Weight Score", "Max \nSpeed Score", 
                          "Max Acceleration Score", "Avg \nSpeed Score", 
                          "Avg \nAcceleration \nScore"),
          axis.label.size = 4, plot.title = paste(player, "Athletic Traits Chart")) +
      annotate("text", x = 12, y = 12, label = paste("Total Athleticism Score: \n",
                                                    total_score))
}

player_radar_chart_pos_adj("Tyreek Hill")
```

## Adjusted Score {.auto-animate}
::: columns
::: {.column width="50%"}
```{r}
player_radar_chart("Tyreek Hill")
player_radar_chart("Trent Williams")
```
:::
:::{.column width="50%"}
```{r}
player_radar_chart_pos_adj("Tyreek Hill")
player_radar_chart_pos_adj("Trent Williams")
```


:::
:::
## Issue Resolved {.auto-animate}

```{r, echo=FALSE}
college_data$final_score <- NA
for (i in 1:nrow(college_data)) {
  posit <- college_data$position[i]  
  score_col <- paste(posit, 'Athleticism_Score', sep = "_")  
  college_data$final_score[i] <- college_data[[score_col]][i] 
}

position_data_adj <- college_data %>% group_by(position) %>% 
  summarise(athleticism_score = mean(final_score))

ggplot(position_data_adj, aes(x = reorder(position, athleticism_score), y = athleticism_score, fill = athleticism_score > 0)) +
  geom_bar(stat="identity") + 
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"))+
  coord_flip() + 
  theme_minimal() + 
  labs(title = "Diverging Plot by Position", x = "Position", y = "Athleticism") +
  theme(legend.position = "none")+
  ylim(-1, 1) 
```

## Athleticism By Age

```{r, echo=FALSE}
by_age <- college_data %>% group_by(age) %>% 
  summarise(ath_score = mean(final_score, na.rm=TRUE)) %>%
  arrange(age) %>% filter(!is.na(age))

by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
by_age <- by_age[!is.na(by_age$ath_score),]

colors <- ifelse(by_age$ath_score > 0, "green", "red")

{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$ath_score, ylim=c(-4, 4), xlim=c(0,23), ylab='Average Athleticism Score', xlab='Age', main='Average Athleticism Score of Players by Age', col = colors)
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=ifelse(by_age$ath_score>0,(by_age$ath_score+1), by_age$ath_score - 1), labels=round(by_age$ath_score, 1))
}
```

## Age and Athleticism Regression

```{r, echo=FALSE}
ath_vs_age <- lm(final_score ~ age, college_data)
#summary(ath_vs_age)

x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(ath_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 


{plot(college_data$age, college_data$final_score, ylim=c(-5,5), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Athletic Score Years)",
     main = "Relationship Between Age and Athletic Score",)
abline(ath_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```

# The Impact of Athleticism on Defense {background="#6B6B6B"}

## Impact Defenders

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM plays 
;
")
plays <- dbFetch(res, -1)
dbClearResult(res)
plays_defenders <- plays %>%
  mutate(defenders = str_extract(playDescription, "\\(([A-Za-z\\.\\s;'-]+)\\)\\.?$")) %>%
    filter(!is.na(defenders)) %>%
      mutate(
        defenders = str_replace_all(defenders, "[\\(\\)]", ""),
        defenders = str_replace_all(defenders, "(\\b[A-Z])\\.", "\\1\\. "),
      )

defender_list <- strsplit(plays_defenders$defenders, ";\\s*")
defenders_all <- data.frame(defenders = unlist(defender_list))

defender_counts <- defenders_all %>%
  group_by(defenders) %>%
    summarise(count = n()) %>%
      arrange(desc(count)) %>%
        slice_head(n = 10)

ggplot(defender_counts, aes(x = reorder(defenders, count), y = count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Top 10 Defenders by Number of Impacts",
    x = "Defender",
    y = "Number of Impacts"
  ) +
  theme_minimal()
```

# Impact of Athleticism on Offense

##Athleticism vs Offensive EPA Scatterplot

```{r}


split_plays_data <- split(plays, plays$ballCarrierDisplayName)
epa_data <- lapply(split_plays_data, function(subset_df){mean(subset_df$expectedPointsAdded)
})

split_college_data <- split(college_data, college_data$name)
athleticism_data <- lapply(split_college_data, function(subset_df){mean(subset_df$Athleticism_Score)})

epa_df <- data.frame(name = names(epa_data), list_value = unlist(epa_data))
athleticism_df <- data.frame(name = names(athleticism_data), list_value = unlist(athleticism_data))

merged_df <- merge(epa_df, athleticism_df, by = "name")

ggplot(merged_df, aes(x = list_value.y, y = list_value.x)) +
  geom_point() + geom_smooth(method = "lm", col = "blue") + labs(title = "Scatter Plot of Athleticism vs Average Offensive EPA Scores by Player",
                      y = "Average Offensive EPA by Player", x = "Athleticism Score") + theme_minimal()

```


## Source
This presentation is a subset of the demo created by quarto, plus other material.

The complete source of the demo can be found following [this link](https://quarto.org/docs/presentations/revealjs/).

## Killer Plot

```{r}

```

## Hello, There

This presentation will show you examples of what you can do with Quarto and [Reveal.js](https://revealjs.com), including:

-   Presenting code and LaTeX equations
-   Including computations in slide output
-   Image, video, and iframe backgrounds
-   Fancy transitions and animations
-   Printing to PDF

...and much more

## Pretty Code {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

``` r
# Define a server for the Shiny app
function(input, output) {
  
  # Fill in the spot we created for a plot
  output$phonePlot <- renderPlot({
    # Render a barplot
  })
}
```

::: footer
Learn more: [Syntax Highlighting](https://quarto.org/docs/output-formats/html-code.html#highlighting)
:::

## Code Animations {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

``` r
# Define a server for the Shiny app
function(input, output) {
  
  # Fill in the spot we created for a plot
  output$phonePlot <- renderPlot({
    # Render a barplot
    barplot(WorldPhones[,input$region]*1000, 
            main=input$region,
            ylab="Number of Telephones",
            xlab="Year")
  })
}
```

::: footer
Learn more: [Code Animations](https://quarto.org/docs/presentations/revealjs/advanced.html#code-animations)
:::

## Line Highlighting

-   Highlight specific lines for emphasis
-   Incrementally highlight additional lines

``` {.python code-line-numbers="4-5|7|10"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

::: footer
Learn more: [Line Highlighting](https://quarto.org/docs/presentations/revealjs/#line-highlighting)
:::

## Executable Code

```{r}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
library(ggplot2)
ggplot(mtcars, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess")
```

::: footer
Learn more: [Executable Code](https://quarto.org/docs/presentations/revealjs/#executable-code)
:::

## LaTeX Equations

[MathJax](https://www.mathjax.org/) rendering of equations to HTML

::: columns
::: {.column width="40%"}
``` tex
\begin{gather*}
a_1=b_1+c_1\\
a_2=b_2+c_2-d_2+e_2
\end{gather*}

\begin{align}
a_{11}& =b_{11}&
  a_{12}& =b_{12}\\
a_{21}& =b_{21}&
  a_{22}& =b_{22}+c_{22}
\end{align}
```
:::

::: {.column width="60%"}
```{=tex}
\begin{gather*}
a_1=b_1+c_1\\
a_2=b_2+c_2-d_2+e_2
\end{gather*}
```
```{=tex}
\begin{align}
a_{11}& =b_{11}&
  a_{12}& =b_{12}\\
a_{21}& =b_{21}&
  a_{22}& =b_{22}+c_{22}
\end{align}
```
:::
:::

::: footer
Learn more: [LaTeX Equations](https://quarto.org/docs/authoring/markdown-basics.html#equations)
:::

## Column Layout {.smaller}

Arrange content into columns of varying widths:

::: columns
::: {.column width="35%"}
#### Motor Trend Car Road Tests

The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles.
:::

::: {.column width="3%"}
:::

::: {.column width="62%"}
```{r}
knitr::kable(head(mtcars)[,c("mpg",	"cyl", "disp", "hp", "wt")])
```
:::
:::

::: footer
Learn more: [Multiple Columns](https://quarto.org/docs/presentations/revealjs/#multiple-columns)
:::

## Incremental Lists

Lists can optionally be displayed incrementally:

::: incremental
-   First item
-   Second item
-   Third item
:::

. . .

<br/> Insert pauses to make other types of content display incrementally.

::: footer
Learn more: [Incremental Lists](https://quarto.org/docs/presentations/revealjs/#incremental-lists)
:::

## Fragments

Incremental text display and animation with fragments:

<br/>

::: {.fragment .fade-in}
Fade in
:::

::: {.fragment .fade-up}
Slide up while fading in
:::

::: {.fragment .fade-left}
Slide left while fading in
:::

::: {.fragment .fade-in-then-semi-out}
Fade in then semi out
:::

. . .

::: {.fragment .strike}
Strike
:::

::: {.fragment .highlight-red}
Highlight red
:::

::: footer
Learn more: [Fragments](https://quarto.org/docs/presentations/revealjs/advanced.html#fragments)
:::

## Slide Backgrounds {background="#43464B"}

Set the `background` attribute on a slide to change the background color (all CSS color formats are supported).

Different background transitions are available via the `background-transition` option.

::: footer
Learn more: [Slide Backgrounds](https://quarto.org/docs/presentations/revealjs/#color-backgrounds)
:::

## Media Backgrounds {background="#43464B" background-image="images/milky-way.jpeg"}

You can also use the following as a slide background:

-   An image: `background-image`

-   A video: `background-video`

-   An iframe: `background-iframe`

::: footer
Learn more: [Media Backgrounds](https://quarto.org/docs/presentations/revealjs/#image-backgrounds)
:::


## Auto-Animate {auto-animate="true" auto-animate-easing="ease-in-out"}

Automatically animate matching elements across slides with Auto-Animate.

::: r-hstack
::: {data-id="box1" auto-animate-delay="0" style="background: #2780e3; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box2" auto-animate-delay="0.1" style="background: #3fb618; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box3" auto-animate-delay="0.2" style="background: #e83e8c; width: 200px; height: 150px; margin: 10px;"}
:::
:::

::: footer
Learn more: [Auto-Animate](https://quarto.org/docs/presentations/revealjs/advanced.html#auto-animate)
:::

## Auto-Animate {auto-animate="true" auto-animate-easing="ease-in-out"}

Automatically animate matching elements across slides with Auto-Animate.

::: r-stack
::: {data-id="box1" style="background: #2780e3; width: 350px; height: 350px; border-radius: 200px;"}
:::

::: {data-id="box2" style="background: #3fb618; width: 250px; height: 250px; border-radius: 200px;"}
:::

::: {data-id="box3" style="background: #e83e8c; width: 150px; height: 150px; border-radius: 200px;"}
:::
:::

::: footer
Learn more: [Auto-Animate](https://quarto.org/docs/presentations/revealjs/advanced.html#auto-animate)
:::

## Slide Transitions {.smaller}

The next few slides will transition using the `slide` transition

| Transition | Description                                                            |
|------------|------------------------------------------------------------------------|
| `none`     | No transition (default, switch instantly)                              |
| `fade`     | Cross fade                                                             |
| `slide`    | Slide horizontally                                                     |
| `convex`   | Slide at a convex angle                                                |
| `concave`  | Slide at a concave angle                                               |
| `zoom`     | Scale the incoming slide so it grows in from the center of the screen. |

::: footer
Learn more: [Slide Transitions](https://quarto.org/docs/presentations/revealjs/advanced.html#slide-transitions)
:::

## Tabsets {.smaller .scrollable transition="slide"}

::: panel-tabset
### Plot

```{r}
library(ggplot2)
ggplot(mtcars, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess")
```

### Data

```{r}
knitr::kable(mtcars)
```
:::

::: footer
Learn more: [Tabsets](https://quarto.org/docs/presentations/revealjs/#tabsets)
:::

## Interactive Slides {.smaller transition="slide"}

Include Jupyter widgets and htmlwidgets in your presentations

```{r}
#| echo: false
#| fig-height: 5
library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

::: footer
Learn more: [Jupyter widgets](https://quarto.org/docs/interactive/widgets/jupyter.html), [htmlwidgets](https://quarto.org/docs/interactive/widgets/htmlwidgets.html)
:::


## Preview Links

Navigate to hyperlinks without disrupting the flow of your presentation.

Use the `preview-links` option to open links in an iframe on top of your slides. Try clicking the link below for a demonstration:

::: {style="text-align: center; margin-top: 1em"}
[quarto.org/revealjs](https://quarto.org/docs/presentations/revealjs/){preview-link="true" style="text-align: center"}
:::

::: footer
Learn more: [Preview Links](https://quarto.org/docs/presentations/revealjs/presenting.html#preview-links)
:::



# Shiny examples

## Shiny example 1

::: columns
::: {.column width="25%"}
::: {style="font-size: 40%"}
```{r}
sliderInput("bins", "Number of bins:", 
            min = 1, max = 50, value = 30)
```
:::
:::

::: {.column width="75%"}
```{r}
plotOutput("distPlot", height = "500px")
```
:::
:::

```{r}
#| context: server
output$distPlot <- renderPlot({
   x <- faithful[, 2]  # Old Faithful Geyser data
   bins <- seq(min(x), max(x), length.out = input$bins + 1)
   hist(x, breaks = bins, col = 'darkgray', border = 'white',
        xlab = 'Waiting time to next eruption (in mins)',
        main = 'Histogram of waiting times')
}, res = 120)
```

## Shiny example 2

::: {style="font-size: 40%"}

```{r}
#| panel: sidebar
vars <- setdiff(names(iris), "Species")
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
```
:::

```{r}
#| panel: fill
plotOutput('plot1')
```

```{r}
#| context: server
selectedData <- reactive({
    iris[, c(input$xcol, input$ycol)]
  })
clusters <- reactive({
  kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
  palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
    "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
  par(mar = c(5.1, 4.1, 0, 1))
  plot(selectedData(),
       col = clusters()$cluster,
       pch = 20, cex = 3)
  points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
```


## Shiny example 3

```{r}
#| context: setup
library(ggplot2)
dataset <- diamonds
```

```{r}
#| panel: fill
plotOutput('plot')
```

::: {style="font-size: 40%"}

::: {layout-ncol="3"}
```{r}
sliderInput('sampleSize', 'Sample Size', 
            min=1, max=nrow(dataset),
            value=min(1000, nrow(dataset)), 
            step=500, round=0)
br()
checkboxInput('jitter', 'Jitter')
checkboxInput('smooth', 'Smooth')
```

```{r}
selectInput('x', 'X', names(dataset))
selectInput('y', 'Y', names(dataset), names(dataset)[[2]])
selectInput('color', 'Color', c('None', names(dataset)))
```

```{r}
selectInput('facet_row', 'Facet Row',
            c(None='.', names(diamonds[sapply(diamonds, is.factor)])))
selectInput('facet_col', 'Facet Column',
            c(None='.', names(diamonds[sapply(diamonds, is.factor)])))
```
:::
:::

```{r}
#| context: server
dataset <- reactive({
  diamonds[sample(nrow(diamonds), input$sampleSize),]
})
 
output$plot <- renderPlot({
  
  p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
  
  if (input$color != 'None')
    p <- p + aes_string(color=input$color)
  
  facets <- paste(input$facet_row, '~', input$facet_col)
  if (facets != '. ~ .')
    p <- p + facet_grid(facets)
  
  if (input$jitter)
    p <- p + geom_jitter()
  if (input$smooth)
    p <- p + geom_smooth()
  
  print(p)
  
}, res = 120)
```
