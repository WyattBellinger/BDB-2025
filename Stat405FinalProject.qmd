---
title: "Importance of Athleticism in the NFL"
subtitle: "Stat 405 Final Project"
format:
  revealjs: 
    #embed-resources: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
    footer: STAT 405 - Devin Abraham - Wyatt Bellinger - Brady Detwiler - Dylan Raaum
server: shiny
---

<style>
.slide {
    height: 750px;
    overflow-y: auto !important;
}
</style>

# Explaining the Data  {background="#6B6B6B"}

## Data Introduction

- Our Data is NFL Player Tracking data
- Shows position of every player every 10th of a second
- Supplementary Data includes specific information on the players, overall play by play data, and overall game data.
```{r, echo=FALSE}
library(nflverse)
library(tidyverse)
library(stringr)
library(dplyr)
library(readr)
library(data.table)
library(ggplot2)
library(treemapify)
library(ggradar)
library(RSQLite)

#This first section of code will be to explore the data, just to get some ideas of what to do
#make sure your directory call is right
#games <- read.csv('games.csv')
#players <- read.csv('players.csv')
#plays <- read.csv('plays.csv')
#tackles <- read.csv('tackles.csv')
#data <- read.csv('all_weeks_data.csv')

dcon <- dbConnect(SQLite(), dbname = "BDBStat405.db")

res <- dbSendQuery(conn = dcon, "
SELECT  AVG(a.nflId) as nflId, AVG(a.s) as avg_speed, MAX(a.s) as max_speed, 
AVG(a.a) as avg_accel, MAX(a.a) as max_accel, MIN(b.height) as height, 
AVG(b.weight) as weight, MIN(b.collegeName) as college, 
MIN(b.position) as position, MIN(b.birthDate) as birth_date, 
MIN(b.displayName) as name
FROM all_weeks_data as a
LEFT JOIN players as b
ON a.nflId = b.nflId
GROUP BY a.nflId
;
")
college_data <- dbFetch(res, -1)
dbClearResult(res)

college_data$avg_speed <- as.numeric(college_data$avg_speed)
college_data$max_speed <- as.numeric(college_data$max_speed)
college_data$avg_accel <- as.numeric(college_data$avg_accel)
college_data$max_accel <- as.numeric(college_data$max_accel)

slanted_mean <- function(data){
  lower_bound <- quantile(data, 0.05)
  upper_bound <- quantile(data, 0.95)
  new_data <- data[data>lower_bound & data<upper_bound]
  return(mean(new_data, na.rm=TRUE))
}

convert_to_inches <- function(height) {
  parts <- strsplit(height, "-")[[1]]
  feet <- as.numeric(parts[1])
  inches <- as.numeric(parts[2])
  total_inches <- (feet * 12) + inches
  return(total_inches)
}

find_age <- function(year){
  birth_date <- strsplit(year, "-")[[1]]
  birth_year <- as.numeric(birth_date[1])
  return(2022-birth_year)
}

college_data['heightIN'] <- sapply(college_data$height, convert_to_inches)
college_data['age'] <- suppressWarnings(sapply(college_data$birth_date, find_age))
college_data <- college_data %>% filter(!is.na(nflId))


by_age <- college_data %>% group_by(age) %>% 
  summarise(mean_speed = mean(max_speed, na.rm = T), 
            mean_acceleration=mean(max_accel, na.rm=T ))%>%
  arrange(age) %>% filter(!is.na(age))

```

## Visualizing the Data

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM all_weeks_data 
;
")
data <- dbFetch(res, -1)
dbClearResult(res)

data$s <- as.numeric(data$s)
data$a <- as.numeric(data$a)
data$x <- as.numeric(data$x)
data$y <- as.numeric(data$y)
data$dis <- as.numeric(data$dis)
data$o <- as.numeric(data$o)
data$dir <- as.numeric(data$dir)
{
plot_player <- function(player_name, game_id, play_id, data, player_color) {
  player_data <- subset(data, displayName == player_name & gameId == game_id & playId == play_id)
  if (nrow(player_data) == 0) {
    warning(paste("No data found for", player_name, "in game", game_id, "and play", play_id))
    return(NULL)
  }
  lines(player_data$x, player_data$y, col = player_color, lwd = 2)
}

plot_play_movement <- function(game_id, play_id, data) {
  play_data <- subset(data, gameId == game_id & playId == play_id)
  
  if (nrow(play_data) == 0) {
    warning(paste("No data found for game", game_id, "and play", play_id))
    return(NULL)
  }
  teams <- unique(play_data$club[play_data$displayName != "football"])
  
  team_colors <- rainbow(length(teams))
  names(team_colors) <- teams
  
  football_color <- "brown"
  
  plot(NULL, xlim = c(0, 120), ylim = c(0, 53.3),
       xlab = 'X Position (yards)', ylab = 'Y Position (yards)',
       main = paste("Player Movements for Game", game_id, "Play", play_id))
  
  rect(0, 0, 120, 53.3, border = "green", lwd = 2)
  rect(0, 0, 10, 53.3, border = "black", lwd = 2)
  rect(110, 0, 120, 53.3, border = "black", lwd = 2)
  
  for (player in unique(play_data$displayName)) {
    if (player == "football") {
      player_color <- football_color
    } else {
      player_team <- unique(play_data$club[play_data$displayName == player])
      player_color <- team_colors[player_team]
    }
    plot_player(player, game_id, play_id, data, player_color)
  }
  
  legend_labels <- c(teams, "Football")
  legend_colors <- c(team_colors, football_color)
  legend("topright", legend = legend_labels, col = legend_colors, lwd = 2, bg = "white")
}

plot_play_movement(2022101603, 346, data) #convert to an animation
}
```

# Exploration of Speed {background="#6B6B6B"}

## Speed

- Wanted to look at athletic traits of players
- One of the most impressive and impactful traits is speed

```{r, echo=FALSE}

by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
by_age <- by_age[!is.na(by_age$mean_speed),]


```

## Speed by Age

```{r, echo=FALSE}


{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$mean_speed, ylim=c(0,10), xlim=c(0,23), ylab='Average Max Speed', xlab='Age', main='Average Max Speed of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_speed-.5), labels=round(by_age$mean_speed,1))
}

```

## Regression of Age and Speed

```{r, echo=FALSE}

speed_vs_age <- lm(avg_speed ~ age, college_data)
#summary(speed_vs_age)

x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(speed_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 
#cor(no_missing$age, no_missing$avg_speed)

{plot(college_data$age, college_data$avg_speed, ylim=c(0,8), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Average Speed (yd/s)",
     main = "Relationship Between Age and Average Speed",)
abline(speed_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```

## Speed by Position

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM players 
;
")
players <- dbFetch(res, -1)
dbClearResult(res)
max_speeds <- aggregate(s ~ nflId, data = data, FUN = max)
max_speeds <- subset(max_speeds, max_speeds$s < 18)
max_speeds_with_positions <- merge(max_speeds, players, by = "nflId")
ggplot(max_speeds_with_positions, aes(x = position, y = s)) +
  geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
  labs(title = "Distribution of Max Speeds by Position",
       x = "Position",
       y = "Max Speed (yars/sec)") +
  theme_minimal()
```

# Exploration of Acceleration {background="#6B6B6B"}

## Speed Change During a Play
::: columns
::: {.column width="35%"}
- Acceleration is next step
- As can be seen below, speed can vary over a play significantly
:::
::: {.column width="3%"}
:::
::: {.column width="60%"}
```{r, echo=FALSE}
player_speed <- function(name){
  
  if (!(name %in% data$displayName)){
    return(FALSE)
  }
  player_name <- data[data$displayName == name, ]
  play_id <- sample(player_name$playId, 1)
  player_play <- player_name[player_name$playId == play_id, ]
  
  
  plot(player_play$frameId, player_play$s, type = "l",
       main = paste(name, "Play Speed Over Time"), 
       xlab = "Time Since Start of Play (Tenths of a Second)",
       ylab = "Speed (yards/second)", 
       col = "blue",           
       lwd = 2,               
       cex.main = 1.5,         
       cex.lab = 1.2,         
       cex.axis = 1.1,         
       font.main = 2,          
       las = 1,                
       bty = "l")              
  
  
  grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")
  

  
}


name = "Micah Parsons"
player_name <- data[data$displayName == name, ]
play_id <- 3183
player_play <- player_name[player_name$playId == play_id, ]

  
{
plot(player_play$frameId, player_play$s, type = "l",
     main = paste(name, "Play Speed Over Time"), 
     xlab = "Time Since Start of Play (Tenths of a Second)",
     ylab = "Speed (yards/second)", 
     col = "blue",           
     lwd = 2,               
     cex.main = 1.5,         
     cex.lab = 1.2,         
     cex.axis = 1.1,         
     font.main = 2,          
     las = 1,                
     bty = "l")              
}
```
:::
:::
## Acceleration by Age

```{r, echo=FALSE}
{barplot(by_age$mean_acceleration, ylim=c(0,13), xlim=c(0,23), ylab='Average Max Acceleration', xlab='Age', main='Average Max Acceleration of Players by Age')
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=(by_age$mean_acceleration-.5), labels=round(by_age$mean_acceleration,1))}
```

# Athleticism Score {background="#6B6B6B"}

## Non Adjusted Score
```{r, echo=FALSE}


z_score <- function(column){
  scoring_data <- college_data %>% filter()
  col_mean <- mean(college_data[[column]], na.rm=TRUE)
  col_sd <- sd(college_data[[column]], na.rm=TRUE)
  name <- paste(as.character(column), "score", sep='_')
  college_data[[name]] <<- (college_data[[column]] - col_mean) / col_sd
  
}

for (trait in list(quote(heightIN),quote(weight), quote(max_speed), quote(max_accel), quote(avg_speed), quote(avg_accel))){
  z_score(trait)
}

college_data['Athleticism_Score']<- college_data$heightIN_score+ college_data$weight_score+ college_data$max_speed_score + college_data$max_accel_score + college_data$avg_speed_score + college_data$avg_accel_score


player_radar_chart <- function(player){
  player_data<-college_data[college_data$name==player,13:19]
  total_score <- round(college_data[college_data$name==player,20][[1]], digits=2)
 
  ggradar(player_data, grid.min=-5, grid.max=5, grid.mid=0, grid.label.size = 3, 
          values.radar = c(-5,0,5), gridline.mid.colour = 'blue', group.point.size = 3,
          group.line.width = .75, fill=TRUE, fill.alpha = .25, 
          axis.labels = c("Height Score", "Weight Score", "Max \nSpeed Score", 
                          "Max Acceleration Score", "Avg \nSpeed Score", 
                          "Avg \nAcceleration \nScore"),
          axis.label.size = 4, plot.title = paste(player, "Athletic Traits Chart")) +
      annotate("text", x = 12, y = 12, label = paste("Total Athleticism Score: \n",
                                                    total_score))
}

player_radar_chart("Tyreek Hill")



```

## Score Issues

```{r, echo=FALSE}

grouppos <- function(df){
  unique_items<-unique(df$position)
  grouped_data <- data.frame(position=character(),
                             mean_speed_score=double(),
                             mean_acceleration_score=double(),
                             max_acceleration_score=double(),
                             max_speed_score=double(),
                             height_score=double(),
                             weight_score=double(),
                             athleticism_score=double(),
                             stringsAsFactors = FALSE)
  for (token in unique_items){
    individ_data <-df[df$position==token,]
    meanspeedscore <- mean(individ_data$avg_speed_score, na.rm=TRUE)
    meanaccelscore <- mean(individ_data$avg_accel_score, na.rm=TRUE)
    maxaccelscore <- mean(individ_data$max_accel_score, na.rm=TRUE)
    maxspeedscore <- mean(individ_data$max_speed_score, na.rm=TRUE)
    heightscore <- mean(individ_data$heightIN_score, na.rm=TRUE)
    weightscore <- mean(individ_data$weight_score, na.rm=TRUE)
    athleticismscore <- mean(individ_data$Athleticism_Score, na.rm=TRUE)
    grouped_data <- rbind(grouped_data, data.frame(
      position=token,
      mean_speed_score=meanspeedscore,
      mean_acceleration_score=meanaccelscore,
      max_acceleration_score=maxaccelscore,
      max_speed_score=maxspeedscore,
      height_score=heightscore,
      weight_score=weightscore,
      athleticism_score=athleticismscore,
      stringsAsFactors = FALSE
    ))
  }
  return(grouped_data)
}

position_data <- grouppos(college_data)
position_data <- position_data[order(position_data$athleticism_score),]

ggplot(position_data, aes(x = reorder(position, athleticism_score), y = athleticism_score, fill = athleticism_score > 0)) +
  geom_bar(stat="identity") + 
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"))+
  coord_flip() + 
  theme_minimal() + 
  labs(title = "Diverging Plot by Position", x = "Position", y = "Athleticism") +
  theme(legend.position = "none")


```

## Adjusted Score {.auto-animate}

```{r, echo=FALSE}
z_score_by_position <- function(column, pos){
  scoring_data <- college_data %>% filter(position==pos)
  col_mean <- mean(scoring_data[[column]], na.rm=TRUE)
  col_sd <- sd(scoring_data[[column]], na.rm=TRUE)
  name <- paste(pos, as.character(column), "score", sep='_')
  college_data[[name]] <<- (college_data[[column]] - col_mean) / col_sd
}

for (trait in list(quote(heightIN),quote(weight), quote(max_speed), quote(max_accel), quote(avg_speed), quote(avg_accel))){
  for (posit in unique(college_data$position)){
    z_score_by_position(trait, posit)
  }
}

for (posit in unique(college_data$position)){
  
  height_score_col <- paste(posit, 'heightIN_score', sep = "_")
  weight_score_col <- paste(posit, 'weight_score', sep = "_")
  max_speed_col <- paste(posit, 'max_speed_score', sep = "_")
  max_accel_col <- paste(posit, 'max_accel_score', sep = "_")
  avg_speed_col <- paste(posit, 'avg_speed_score', sep = "_")
  avg_accel_col <- paste(posit, 'avg_accel_score', sep = "_")
  
  name <- paste(posit, 'Athleticism_Score', sep="_" )
  
  college_data[[name]] <- college_data[[height_score_col]] + 
    college_data[[weight_score_col]] + 
    college_data[[max_speed_col]] + 
    college_data[[max_accel_col]] + 
    college_data[[avg_speed_col]] + 
    college_data[[avg_accel_col]]
}


player_radar_chart_pos_adj <- function(player){
  player_data<-college_data[college_data$name==player,]
  pos <- unique(player_data$position)
  
  height_score_col <- paste(pos, 'heightIN_score', sep = "_")
  weight_score_col <- paste(pos, 'weight_score', sep = "_")
  max_speed_col <- paste(pos, 'max_speed_score', sep = "_")
  max_accel_col <- paste(pos, 'max_accel_score', sep = "_")
  avg_speed_col <- paste(pos, 'avg_speed_score', sep = "_")
  avg_accel_col <- paste(pos, 'avg_accel_score', sep = "_")
  total_score_col <- paste(pos, 'Athleticism_Score', sep="_" )
  col_list <- c("age",height_score_col, weight_score_col, max_speed_col, max_accel_col, 
                avg_speed_col, avg_accel_col)
  
  player_data <- college_data[college_data$name==player,col_list]
  
  total_score <- round(college_data[college_data$name==player,total_score_col][[1]], digits=2)
 
  ggradar(player_data, grid.min=-5, grid.max=5, grid.mid=0, grid.label.size = 3, 
          values.radar = c(-5,0,5), gridline.mid.colour = 'blue', group.point.size = 3,
          group.line.width = .75, fill=TRUE, fill.alpha = .25, 
          axis.labels = c("Height Score", "Weight Score", "Max \nSpeed Score", 
                          "Max Acceleration Score", "Avg \nSpeed Score", 
                          "Avg \nAcceleration \nScore"),
          axis.label.size = 4, plot.title = paste(player, "Athletic Traits Chart")) +
      annotate("text", x = 12, y = 12, label = paste("Total Athleticism Score: \n",
                                                    total_score))
}

player_radar_chart_pos_adj("Tyreek Hill")
```

## Adjusted Score {.auto-animate}
::: columns
::: {.column width="50%"}
```{r}
player_radar_chart("Tyreek Hill")
player_radar_chart("Trent Williams")
```
:::
:::{.column width="50%"}
```{r}
player_radar_chart_pos_adj("Tyreek Hill")
player_radar_chart_pos_adj("Trent Williams")
```


:::
:::
## Issue Resolved {.auto-animate}

```{r, echo=FALSE}
college_data$final_score <- NA
for (i in 1:nrow(college_data)) {
  posit <- college_data$position[i]  
  score_col <- paste(posit, 'Athleticism_Score', sep = "_")  
  college_data$final_score[i] <- college_data[[score_col]][i] 
}

position_data_adj <- college_data %>% group_by(position) %>% 
  summarise(athleticism_score = mean(final_score))

ggplot(position_data_adj, aes(x = reorder(position, athleticism_score), y = athleticism_score, fill = athleticism_score > 0)) +
  geom_bar(stat="identity") + 
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"))+
  coord_flip() + 
  theme_minimal() + 
  labs(title = "Diverging Plot by Position", x = "Position", y = "Athleticism") +
  theme(legend.position = "none")+
  ylim(-1, 1) 
```

## Athleticism By Age

```{r, echo=FALSE}
by_age <- college_data %>% group_by(age) %>% 
  summarise(ath_score = mean(final_score, na.rm=TRUE)) %>%
  arrange(age) %>% filter(!is.na(age))

by_age <- by_age[order(by_age$age),]
by_age <- by_age[!is.na(by_age$age),]
by_age <- by_age[!is.na(by_age$ath_score),]

colors <- ifelse(by_age$ath_score > 0, "green", "red")

{
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(by_age$ath_score, ylim=c(-4, 4), xlim=c(0,23), ylab='Average Athleticism Score', xlab='Age', main='Average Athleticism Score of Players by Age', col = colors)
text(x=seq(.7, 23, 1.2), y=c(.3), labels=by_age$age)
text(x=seq(.7, 23, 1.2), y=ifelse(by_age$ath_score>0,(by_age$ath_score+1), by_age$ath_score - 1), labels=round(by_age$ath_score, 1))
}
```

## Age and Athleticism Regression

```{r, echo=FALSE}
ath_vs_age <- lm(final_score ~ age, college_data)
#summary(ath_vs_age)

x_seq <- seq(5, 50, length.out = 200)  
predictions <- predict(ath_vs_age, newdata = data.frame(age = x_seq), interval = "confidence")

no_missing <- college_data[!is.na(college_data$age),] 


{plot(college_data$age, college_data$final_score, ylim=c(-5,5), xlim=c(15,45),
      xlab = "Age (years)", 
     ylab = "Athletic Score Years)",
     main = "Relationship Between Age and Athletic Score",)
abline(ath_vs_age, col='blue', lwd=2)
polygon(c(x_seq, rev(x_seq)), 
        c(predictions[, "lwr"], rev(predictions[, "upr"])), 
        col = rgb(1, 0, 0, 0.2))
grid(col = "gray80", lty = 1)
}

```

# The Impact of Athleticism on Defense {background="#6B6B6B"}

## Impact Defenders

```{r, echo=FALSE}
res <- dbSendQuery(conn = dcon, "
SELECT  *
FROM plays 
;
")
plays <- dbFetch(res, -1)
plays_defenders <- plays %>%
  mutate(defenders = str_extract(playDescription, "\\(([A-Za-z\\.\\s;'-]+)\\)\\.?$")) %>%
    filter(!is.na(defenders)) %>%
      mutate(
        defenders = str_replace_all(defenders, "[\\(\\)]", ""),
        defenders = str_replace_all(defenders, "(\\b[A-Z])\\.", "\\1\\. "),
      )

defender_list <- strsplit(plays_defenders$defenders, ";\\s*")
defenders_all <- data.frame(defenders = unlist(defender_list))

defender_counts_full <- defenders_all %>%
  group_by(defenders) %>%
    summarise(count = n()) %>%
      arrange(desc(count))
defender_counts <- head(defender_counts_full, 10)

ggplot(defender_counts, aes(x = reorder(defenders, count), y = count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Top 10 Defenders by Number of Impacts",
    x = "Defender",
    y = "Number of Impacts"
  ) +
  theme_minimal()

```

## Athleticism and Defensive Player Impact

```{r}

college_data <- mutate(college_data, transformed_name = str_replace(name, "^(\\w)\\w*\\s(\\w+)$", "\\1. \\2."))

defender_counts_full <- left_join(defender_counts_full, select(college_data, final_score, transformed_name), by = join_by(defenders == transformed_name))

ggplot(defender_counts_full, aes(x = count, y = final_score)) +
  geom_point(alpha = 0.6, color = "darkblue", size = 3) + # Base scatter points
  stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = 0.4) + # Density overlay
  scale_fill_viridis_c(option = "C") + # Gradient color scale
  labs(
    title = "Impact Plays vs Athletic Score for NFL Defensive Players",
    x = "Impact Plays",
    y = "Athletic Score",
    fill = "Density"
  ) +
  theme_minimal(base_size = 14) +
  theme(legend.position = "right")


```
# Impact of Athleticism on Offense {background="#6B6B6B"}

## Athleticism vs Offensive EPA Scatterplot

```{r}


split_plays_data <- split(plays, plays$ballCarrierDisplayName)
epa_data <- lapply(split_plays_data, function(subset_df){mean(subset_df$expectedPointsAdded)
})

split_college_data <- split(college_data, college_data$name)
athleticism_data <- lapply(split_college_data, function(subset_df){mean(subset_df$Athleticism_Score)})

epa_df <- data.frame(name = names(epa_data), list_value = unlist(epa_data))
athleticism_df <- data.frame(name = names(athleticism_data), list_value = unlist(athleticism_data))

merged_df <- merge(epa_df, athleticism_df, by = "name")
```

```{r}
ggplot(merged_df, aes(x = list_value.y, y = list_value.x)) +
  geom_point() + 
  geom_smooth(method = "lm", col = "blue") + 
  labs(title = "Scatter Plot of Athleticism vs Average Offensive EPA Scores by Player", 
       y = "Average Offensive EPA by Player", x = "Athleticism Score") + 
  theme_minimal()

```

## Killer Plot

```{r}
#| context: setup
library(shiny)
library(shinyWidgets)
library(animation)
library(farver)
library(teamcolors)
library(grid)
library(nflverse)
library(tidyverse)
library(stringr)
library(dplyr)
library(readr)
library(data.table)
library(ggplot2)
library(treemapify)
library(ggradar)
library(RSQLite)

games <- read.csv('games.csv')
plays <- read.csv('plays.csv')
data <- read.csv('all_weeks.csv')
college_data <- read.csv('final_ath2.csv')


team_name_mapping <- list(
  ARI = "Arizona Cardinals", ATL = "Atlanta Falcons", BAL = "Baltimore Ravens",
  BUF = "Buffalo Bills", CAR = "Carolina Panthers", CHI = "Chicago Bears",
  CIN = "Cincinnati Bengals", CLE = "Cleveland Browns", DAL = "Dallas Cowboys",
  DEN = "Denver Broncos", DET = "Detroit Lions", GB  = "Green Bay Packers",
  HOU = "Houston Texans", IND = "Indianapolis Colts", JAX = "Jacksonville Jaguars",
  KC  = "Kansas City Chiefs", LAC = "Los Angeles Chargers", LAR = "Los Angeles Rams",
  LV  = "Las Vegas Raiders", MIA = "Miami Dolphins", MIN = "Minnesota Vikings",
  NE  = "New England Patriots", NO  = "New Orleans Saints", NYG = "New York Giants",
  NYJ = "New York Jets", PHI = "Philadelphia Eagles", PIT = "Pittsburgh Steelers",
  SEA = "Seattle Seahawks", SF  = "San Francisco 49ers", TB  = "Tampa Bay Buccaneers",
  TEN = "Tennessee Titans", WAS = "Washington Commanders"
)

position_mapping <- c("QB", "T", "TE", "WR", "DE", "NT", "SS", "FS",
                      "G", "OLB", "DT", "CB", "RB", "C", "ILB", "MLB",
                      "FB", "LS", "DB")

hex_to_rgb <- function(hex) {
  rgb <- col2rgb(hex) / 255
  return(as.numeric(rgb))
}

lab_distance <- function(color1, color2) {
  rgb1 <- as.numeric(col2rgb(color1))
  rgb2 <- as.numeric(col2rgb(color2))
 
  lab1 <- farver::convert_colour(matrix(rgb1, nrow = 1), from = "rgb", to = "lab")
  lab2 <- farver::convert_colour(matrix(rgb2, nrow = 1), from = "rgb", to = "lab")
 
  return(sqrt(sum((lab1 - lab2) ^ 2)))
}

nfl_teams <- subset(teamcolors, league == "nfl")
nfl_team_colors <- setNames(nfl_teams$primary, nfl_teams$name)
nfl_team_secondary_colors <- setNames(nfl_teams$secondary, nfl_teams$name)

time_to_seconds <- function(time_str) {
  parts <- unlist(strsplit(time_str, ":"))
  minutes <- as.numeric(parts[1])
  seconds <- as.numeric(parts[2])
  total_seconds <- minutes * 60 + seconds
  return(total_seconds)
}

seconds_to_time <- function(total_seconds) {
  if (total_seconds < 0) total_seconds <- 0
  minutes <- floor(total_seconds / 60)
  seconds <- floor(total_seconds %% 60)
  time_str <- sprintf("%d:%02d", minutes, seconds)
  return(time_str)
}

plot_play_movement <- function(game_id, play_id, data, plays, games, college_data = NULL,
                               num_high_offense = 0, num_low_offense = 0,
                               num_high_defense = 0, num_low_defense = 0,
                               highlight_position_number = NULL,
                               top_age_n = 0,
                               top_height_n = 0,
                               top_weight_n = 0,
                               frame_number = NULL,
                               new_page = TRUE) {
 
  if (new_page) {
    grid.newpage()
  }
  if (!is.null(highlight_position_number)) {
    if (!is.numeric(highlight_position_number) ||
        highlight_position_number < 1 ||
        highlight_position_number > length(position_mapping)) {
      stop(paste("highlight_position_number must be an integer between 1 and", length(position_mapping)))
    }
    highlight_position <- position_mapping[highlight_position_number]
  } else {
    highlight_position <- NULL
  }
 
  if (!is.numeric(top_age_n) || top_age_n < 0) {
    stop("top_age_n must be a non-negative integer.")
  }
  if (!is.numeric(top_height_n) || top_height_n < 0) {
    stop("top_height_n must be a non-negative integer.")
  }
  if (!is.numeric(top_weight_n) || top_weight_n < 0) {
    stop("top_weight_n must be a non-negative integer.")
  }
 
  play_data <- subset(data, gameId == game_id & playId == play_id)
 
  if (nrow(play_data) == 0) {
    stop("No data available for the specified gameId and playId.")
  }
 
  play_info <- subset(plays, gameId == game_id & playId == play_id)
 
  if (nrow(play_info) == 0) {
    stop("No matching play found in 'plays' data frame.")
  }
 
  possession_team_code <- play_info$possessionTeam[1]
  defensive_team_code <- play_info$defensiveTeam[1]
 
  game_info <- subset(games, gameId == game_id)
 
  if (nrow(game_info) == 0) {
    stop("No matching game found in 'games' data frame.")
  }
 
  home_team_abbr <- toupper(game_info$homeTeamAbbr[1])
  away_team_abbr <- toupper(game_info$visitorTeamAbbr[1])
 
  preSnapVisitorScore <- play_info$preSnapVisitorScore[1]
  preSnapHomeScore <- play_info$preSnapHomeScore[1]
 
  if (possession_team_code == home_team_abbr) {
    offense_score <- preSnapHomeScore
    defense_score <- preSnapVisitorScore
    offense_team <- team_name_mapping[[home_team_abbr]]
    defense_team <- team_name_mapping[[away_team_abbr]]
  } else if (possession_team_code == away_team_abbr) {
    offense_score <- preSnapVisitorScore
    defense_score <- preSnapHomeScore
    offense_team <- team_name_mapping[[away_team_abbr]]
    defense_team <- team_name_mapping[[home_team_abbr]]
  } else {
    stop("Possession team does not match home or away team in 'games' data frame.")
  }
 
  possession_team <- team_name_mapping[[possession_team_code]]
  defensive_team <- team_name_mapping[[defensive_team_code]]
 
  team_colors <- nfl_team_colors[c(possession_team, defensive_team)]
  names(team_colors) <- c(possession_team, defensive_team)
 
  team_names <- c(possession_team, defensive_team)
  for (i in 1:(length(team_colors) - 1)) {
    for (j in (i + 1):length(team_colors)) {
      if (lab_distance(team_colors[i], team_colors[j]) < 40) {
        team_name <- team_names[i]
        team_colors[i] <- nfl_team_secondary_colors[[team_name]]
      }
    }
  }
 
  football_color <- "brown"
 
  frame_ids <- sort(unique(play_data$frameId))
 
  if (!is.null(frame_number)) {
   
    if (frame_number < min(frame_ids) || frame_number > max(frame_ids)) {
      stop(paste("frame_number must be between", min(frame_ids), "and", max(frame_ids)))
    }
    frame_ids <- frame_number
  }
 
  pushViewport(viewport(layout = grid.layout(nrow = 1, ncol = 2, widths = unit(c(4, 1), "null"))))
 
  pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
 
  padding_left <- unit(5, "mm")
  padding_right <- unit(5, "mm")
  padding_bottom <- unit(5, "mm")
  padding_top <- unit(5, "mm")
 
  pushViewport(viewport(x = 0.5, y = 0.5,
                        width = unit(1, "npc") - (padding_left + padding_right),
                        height = unit(1, "npc") - (padding_bottom + padding_top),
                        xscale = c(0, 120), yscale = c(-5, 58.3), name = "main_vp"))
 
  grid.rect(x = unit(0, "native"), y = unit(0, "native"),
            width = unit(120, "native"), height = unit(53.3, "native"),
            just = c("left", "bottom"), gp = gpar(fill = "white", col = "darkgreen", lwd = 2))
 
  grid.rect(x = unit(0, "native"), y = unit(0, "native"),
            width = unit(10, "native"), height = unit(53.3, "native"),
            just = c("left", "bottom"), gp = gpar(fill = NA, col = "black", lwd = 2))
  grid.rect(x = unit(110, "native"), y = unit(0, "native"),
            width = unit(10, "native"), height = unit(53.3, "native"),
            just = c("left", "bottom"), gp = gpar(fill = NA, col = "black", lwd = 2))
 
  yard_labels <- c(10, 20, 30, 40, 50, 40, 30, 20, 10)
  yard_positions <- seq(20, 100, by = 10)
 
  for (i in seq_along(yard_positions)) {
    yard <- yard_positions[i]
    grid.lines(x = unit(c(yard, yard), "native"),
               y = unit(c(0, 53.3), "native"),
               gp = gpar(col = "lightgray", lty = "dashed"))
    grid.text(label = yard_labels[i], x = unit(yard, "native"),
              y = unit(1.7, "native"), gp = gpar(col = "darkgray", fontsize = 13, fontface = "bold"))
    grid.text(label = yard_labels[i], x = unit(yard, "native"),
              y = unit(51.6, "native"), gp = gpar(col = "darkgray", fontsize = 13, fontface = "bold"))
  }
 
  title_label <- paste0(offense_team, ": ", offense_score, " vs. ",
                        defense_team, ": ", defense_score)
  grid.text(label = title_label,
            x = unit(60, "native"), y = unit(58.3 - 1, "native"),
            gp = gpar(fontsize = 14, fontface = "bold"))
 
  initial_gameClock_str <- play_info$gameClock[1]
  total_seconds <- time_to_seconds(initial_gameClock_str)
 
  updated_gameClock_str <- seconds_to_time(total_seconds - (frame_ids - 1) * 0.1)
 
  game_clock_grob <- textGrob(label = paste("Game Clock:", updated_gameClock_str),
                              x = unit(60, "native"), y = unit(58.3 - 3, "native"),  # Positioned below the title
                              gp = gpar(col = "black", fontsize = 12, fontface = "bold"),
                              name = "game_clock")
  grid.draw(game_clock_grob)
 
  popViewport()
  popViewport()
 
  pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
 
  legend_padding <- unit(5, "mm")
 
  legend_frame <- frameGrob(name = "legend_frame", vp = viewport(width = unit(1, "npc") - 2 * legend_padding,
                                                                 height = unit(1, "npc") - 2 * legend_padding))
 
  legend_labels <- c(possession_team, defensive_team, "Football")
  legend_colors <- c(team_colors, football_color)
 
  highlight_types <- c("Highest Athleticism", "Lowest Athleticism", "Position Highlight",
                       "Top Age", "Top Height", "Top Weight")
  highlight_colors <- c("green", "red", "yellow", "blue", "orange", "purple")
 
  legend_labels <- c(legend_labels, highlight_types)
  legend_colors <- c(legend_colors, highlight_colors)
 
  legend_items <- list()
 
  for (i in seq_along(legend_labels)) {
   
    if (i <= length(c(possession_team, defensive_team, "Football"))) {
     
      symbol_grob <- linesGrob(x = unit.c(unit(0, "mm"), unit(10, "mm")), y = unit(0.5, "npc"),
                               gp = gpar(col = legend_colors[i], lwd = 2))
    } else {
      symbol_grob <- circleGrob(x = unit(5, "mm"), y = unit(0.5, "npc"), r = unit(3, "mm"),
                                gp = gpar(fill = legend_colors[i], col = legend_colors[i]))
    }
   
    label_grob <- textGrob(label = legend_labels[i], x = unit(15, "mm"), y = unit(0.5, "npc"),
                           just = "left", gp = gpar(col = "black", fontsize = 10))
   
    legend_item <- gTree(children = gList(symbol_grob, label_grob))
   
    legend_items[[i]] <- legend_item
  }
 
  for (i in seq_along(legend_items)) {
    legend_frame <- packGrob(legend_frame, legend_items[[i]], side = "top", height = unit(1, "null"))
  }
 
  grid.draw(legend_frame)
 
  popViewport()
 
  pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
  pushViewport(viewport(x = 0.5, y = 0.5,
                        width = unit(1, "npc") - (padding_left + padding_right),
                        height = unit(1, "npc") - (padding_bottom + padding_top),
                        xscale = c(0, 120), yscale = c(-5, 58.3), name = "dynamic_vp"))
 
  frame <- frame_ids
 
  frame_data <- subset(play_data, frameId == frame)
 
  if (nrow(frame_data) == 0) {
    stop(paste("No data available for frame number", frame_number))
  }
 
  unique_players <- unique(frame_data$displayName)
 
  top_age_players <- character(0)
  top_height_players <- character(0)
  top_weight_players <- character(0)
 
  dynamic_grob <- gTree(name = "dynamic_content")
 
  offense_players <- subset(frame_data, club == possession_team_code & displayName != "football")
  defense_players <- subset(frame_data, club == defensive_team_code & displayName != "football")
 
  if (!is.null(college_data)) {
   
    offense_players <- merge(offense_players, college_data, by.x = "displayName", by.y = "name", all.x = TRUE)
    defense_players <- merge(defense_players, college_data, by.x = "displayName", by.y = "name", all.x = TRUE)
   
    if (nrow(offense_players) > 0) {
      offense_scores <- aggregate(final_score ~ displayName, data = offense_players, FUN = mean, na.rm = TRUE)
      top_offense_players <- head(offense_scores[order(-offense_scores$final_score), "displayName"], num_high_offense)
      low_offense_players <- head(offense_scores[order(offense_scores$final_score), "displayName"], num_low_offense)
    } else {
      top_offense_players <- character(0)
      low_offense_players <- character(0)
    }
   
    if (nrow(defense_players) > 0) {
      defense_scores <- aggregate(final_score ~ displayName, data = defense_players, FUN = mean, na.rm = TRUE)
      top_defense_players <- head(defense_scores[order(-defense_scores$final_score), "displayName"], num_high_defense)
      low_defense_players <- head(defense_scores[order(defense_scores$final_score), "displayName"], num_low_defense)
    } else {
      top_defense_players <- character(0)
      low_defense_players <- character(0)
    }
  } else {
    top_offense_players <- character(0)
    low_offense_players <- character(0)
    top_defense_players <- character(0)
    low_defense_players <- character(0)
  }
 
  if (!is.null(college_data)) {
   
    current_players <- subset(frame_data, displayName != "football")
    current_players <- merge(current_players, college_data, by.x = "displayName", by.y = "name", all.x = TRUE)
   
    if (top_age_n > 0) {
      age_data <- current_players[!is.na(current_players$age), ]
      if (nrow(age_data) > 0) {
        top_age_players <- head(age_data[order(-age_data$age), "displayName"], top_age_n)
      }
    }
   
    if (top_height_n > 0) {
      height_data <- current_players[!is.na(current_players$heightIN), ]
      if (nrow(height_data) > 0) {
        top_height_players <- head(height_data[order(-height_data$heightIN), "displayName"], top_height_n)
      }
    }
   
    if (top_weight_n > 0) {
      weight_data <- current_players[!is.na(current_players$weight), ]
      if (nrow(weight_data) > 0) {
        top_weight_players <- head(weight_data[order(-weight_data$weight), "displayName"], top_weight_n)
      }
    }
   
    highlight_top_age_players <- top_age_players
    highlight_top_height_players <- top_height_players
    highlight_top_weight_players <- top_weight_players
  }
 
  for (player in unique_players) {
    player_data <- subset(frame_data, displayName == player)
   
    if (player == "football") {
      player_color <- football_color
    } else {
      player_team_code <- unique(player_data$club)
      player_team_name <- team_name_mapping[[player_team_code]]
      if (!is.null(player_team_name) && player_team_name %in% names(team_colors)) {
        player_color <- team_colors[player_team_name]
      } else {
        player_color <- "black"
      }
    }
   
    x_pos <- player_data$x
    y_pos <- player_data$y
   
    if (player == "football") {
      dynamic_grob <- addGrob(dynamic_grob,
                              pointsGrob(x = unit(x_pos, "native"),
                                         y = unit(y_pos, "native"),
                                         pch = 16, size = unit(2, "native"),
                                         gp = gpar(col = player_color)))
    } else {
      if (!is.null(college_data)) {
        score <- college_data$final_score[college_data$name == player]
        player_position <- college_data$position[college_data$name == player]
       
        if (length(score) > 0 && !is.na(score[1])) {
          player_final_score <- round(score[1], 1)
          dynamic_grob <- addGrob(dynamic_grob,
                                  circleGrob(x = unit(x_pos, "native"),
                                             y = unit(y_pos, "native"),
                                             r = unit(4, "mm"),
                                             gp = gpar(fill = player_color, col = player_color)))
          dynamic_grob <- addGrob(dynamic_grob,
                                  textGrob(label = player_final_score,
                                           x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           gp = gpar(col = "white", fontsize = 8, fontface = "bold")))
        } else {
          dynamic_grob <- addGrob(dynamic_grob,
                                  pointsGrob(x = unit(x_pos, "native"),
                                             y = unit(y_pos, "native"),
                                             pch = 16, size = unit(2, "native"),
                                             gp = gpar(col = player_color)))
        }
      } else {
        dynamic_grob <- addGrob(dynamic_grob,
                                pointsGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           pch = 16, size = unit(2, "native"),
                                           gp = gpar(col = player_color)))
      }
    }
   
    if (player != "football" && !is.null(college_data) && !is.null(highlight_position)) {
      player_position <- college_data$position[college_data$name == player]
      if (length(player_position) > 0 && player_position[1] == highlight_position) {
       
        dynamic_grob <- addGrob(dynamic_grob,
                                circleGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           r = unit(6, "mm"),
                                           gp = gpar(fill = NA, col = "yellow", lwd = 2)))
      }
    }
   
    if (player != "football" && !is.null(college_data)) {
      if (player %in% top_offense_players || player %in% top_defense_players) {
        dynamic_grob <- addGrob(dynamic_grob,
                                circleGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           r = unit(6, "mm"),
                                           gp = gpar(fill = NA, col = "green", lwd = 2)))
      } else if (player %in% low_offense_players || player %in% low_defense_players) {
        dynamic_grob <- addGrob(dynamic_grob,
                                circleGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           r = unit(6, "mm"),
                                           gp = gpar(fill = NA, col = "red", lwd = 2)))
      }
    }
   
    if (player != "football" && !is.null(college_data)) {
     
      if (top_age_n > 0 && player %in% highlight_top_age_players) {
        dynamic_grob <- addGrob(dynamic_grob,
                                circleGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           r = unit(6, "mm"),
                                           gp = gpar(fill = NA, col = "blue", lwd = 2)))
      }
     
      if (top_height_n > 0 && player %in% highlight_top_height_players) {
        dynamic_grob <- addGrob(dynamic_grob,
                                circleGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           r = unit(6, "mm"),
                                           gp = gpar(fill = NA, col = "orange", lwd = 2)))
      }
     
      if (top_weight_n > 0 && player %in% highlight_top_weight_players) {
        dynamic_grob <- addGrob(dynamic_grob,
                                circleGrob(x = unit(x_pos, "native"),
                                           y = unit(y_pos, "native"),
                                           r = unit(6, "mm"),
                                           gp = gpar(fill = NA, col = "purple", lwd = 2)))
      }
    }
  }
 
  grid.draw(dynamic_grob)
 
  popViewport()  
  popViewport()
  popViewport()  
}
```
::: columns
::: {.column width="20%"}
::: {style="font-size: 20%"}
```{r}
#| panel: sidebar
sliderInput("num_high_offense", "Number of Highest Athleticism Offensive Players:",
            min = 0, max = 3, value = 0)
sliderInput("num_low_offense", "Number of Lowest Athleticism Offensive Players:",
            min = 0, max = 3, value = 0)
sliderInput("num_high_defense", "Number of Highest Athleticism Defensive Players:",
            min = 0, max = 3, value = 0)
sliderInput("num_low_defense", "Number of Lowest Athleticism Defensive Players:",
            min = 0, max = 3, value = 0)
selectInput("highlight_position_number", "Highlight Position:",
            choices = setNames(1:length(position_mapping), position_mapping), selected = NULL)
sliderInput("top_age_n", "Highlight Top N Oldest Players:",
            min = 0, max = 3, value = 0)
sliderInput("top_height_n", "Highlight Top N Tallest Players:",
            min = 0, max = 3, value = 0)
sliderInput("top_weight_n", "Highlight Top N Heaviest Players:",
            min = 0, max = 3, value = 0)
searchInput("game", "Game Id", value = 2022101603, placeholder = 2022101603)
searchInput("play", "Play Id", value = 346, placeholder = 346)
actionButton("prev_frame", "Previous Frame")
actionButton("next_frame", "Next Frame")
br()
textOutput("frame_info")
```
:::
:::

:::{.column width="80%"}
```{r}
#| panel: fill
plotOutput("playPlot", height = "550px")
```
:::
:::
```{r}
#| context: server

rv <- reactiveValues(frame = 1)

total_frames <- reactive({
  max(subset(data, gameId == as.numeric(input$game) & playId == as.numeric(input$play))$frameId, na.rm = TRUE)
})

observeEvent(input$next_frame, {
  if (rv$frame < total_frames()) {
    rv$frame <- rv$frame + 1
  }
})

observeEvent(input$prev_frame, {
  if (rv$frame > 1) {
    rv$frame <- rv$frame - 1
  }
})

output$frame_info <- renderText({
  paste("Current Frame:", rv$frame, "of", total_frames())
})

output$playPlot <- renderPlot({
  req(data, plays, games, college_data)
 
  frame <- rv$frame
  print(paste("Rendering frame:", frame))
 
  plot_play_movement(
    game_id = as.numeric(input$game),
    play_id = as.numeric(input$play),
    data = data,
    plays = plays,
    games = games,
    college_data = college_data,
    num_high_offense = input$num_high_offense,
    num_low_offense = input$num_low_offense,
    num_high_defense = input$num_high_defense,
    num_low_defense = input$num_low_defense,
    highlight_position_number = as.numeric(input$highlight_position_number),
    top_age_n = input$top_age_n,
    top_height_n = input$top_height_n,
    top_weight_n = input$top_weight_n,
    frame_number = frame,
    new_page = FALSE
  )
}, height = 600, width = 800)
```